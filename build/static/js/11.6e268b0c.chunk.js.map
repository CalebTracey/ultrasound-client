{"version":3,"sources":["components/register/RegisterButton.tsx","components/buttons/HomeButton.tsx","components/login/LoginForm.tsx","containers/Login.tsx"],"names":["RegisterButton","to","className","type","HomeButton","style","marginLeft","LoginForm","message","isLoading","onSubmit","errors","register","handleSubmit","id","htmlFor","defaultValue","username","password","disabled","role","Login","useState","setIsLoading","useAppSelector","state","auth","error","dispatch","useAppDispatch","resolver","values","a","useForm","mode","formState","data","login","then","newError"],"mappings":"+HAAA,wBAaeA,IAVY,kBACvB,cAAC,IAAD,CAAMC,GAAG,YAAT,SACI,qBAAKC,UAAU,aAAf,SACI,wBAAQC,KAAK,SAASD,UAAU,kBAAhC,4B,iCCNZ,wBAaeE,IAVQ,kBACnB,cAAC,IAAD,CAAMH,GAAG,QAAT,SACI,qBAAKC,UAAU,aAAaG,MAAO,CAAEC,WAAY,QAAjD,SACI,wBAAQH,KAAK,SAASD,UAAU,0BAAhC,wB,0GCsFGK,EAxEc,SAAC,GAAD,QACzBC,EADyB,EACzBA,QACAC,EAFyB,EAEzBA,UACAC,EAHyB,EAGzBA,SACAC,EAJyB,EAIzBA,OACAC,EALyB,EAKzBA,SACAC,EANyB,EAMzBA,aANyB,OAQzB,sBAAKX,UAAU,OAAf,UACI,+BACI,0CAEJ,qBAAKY,GAAG,QAAQZ,UAAU,gBAA1B,SACI,uBAAMY,GAAG,QAAQJ,SAAUG,EAAaH,GAAxC,UACI,sBAAKR,UAAU,aAAf,UACI,wBAAOa,QAAQ,WAAf,qBAEI,+CACIC,aAAa,GACbb,KAAK,QACDS,EAAS,aAHjB,IAIIV,UAAS,uBACLS,EAAOM,SAAW,aAAe,UAI7C,qBAAKf,UAAU,mBAAf,mBACKS,EAAOM,gBADZ,aACK,EAAiBT,aAI1B,sBAAKN,UAAU,aAAf,UACI,wBAAOa,QAAQ,WAAf,qBAEI,+CACIC,aAAa,GACbb,KAAK,YACDS,EAAS,aAHjB,IAIIV,UAAS,uBACLS,EAAOO,SAAW,aAAe,UAI7C,qBAAKhB,UAAU,mBAAf,mBACKS,EAAOO,gBADZ,aACK,EAAiBV,aAI1B,qBAAKN,UAAU,aAAf,SACI,yBACIC,KAAK,SACLD,UAAU,4BACViB,SAAUV,EAHd,UAKKA,GACG,sBAAMP,UAAU,qCAEpB,8CAGPM,GACG,qBAAKN,UAAU,aAAf,SACI,qBAAKA,UAAU,qBAAqBkB,KAAK,QAAzC,SACKZ,e,yCCTda,UA9DG,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACbb,EADa,KACFc,EADE,KAEdf,EAAUgB,aAAe,SAACC,GAAD,OAAWA,EAAMC,KAAKC,SAC/CC,EAAWC,cAEXC,EAA+B,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAC7B,CACHD,OAAQA,EAAOd,UAAYc,EAAOb,SAAWa,EAAS,GACtDpB,QACKoB,EAAOd,UAAYc,EAAOb,SACrB,CACID,SAAU,CACNd,KAAM,WACNK,QAAS,yBAEbU,SAAU,CACNf,KAAM,WACNK,QAAS,0BAGjB,KAfsB,2CAAH,sDALjB,EA2BhByB,YAAqB,CACrBH,WACAI,KAAM,aALNtB,EAxBgB,EAwBhBA,SACAC,EAzBgB,EAyBhBA,aACaF,EA1BG,EA0BhBwB,UAAaxB,OAkBjB,OACI,qCACI,sBAAKT,UAAU,iBAAf,UACI,cAACE,EAAA,EAAD,IACA,cAACJ,EAAA,EAAD,OAEJ,cAAC,EAAD,CACIS,UAAWA,EACXD,QAASA,EACTE,SArBK,SAAC0B,GACdb,GAAa,GACb,IACIK,EAASS,YAAMD,IAAOE,MAAK,WACvBf,GAAa,MAEnB,MAAOI,GACLC,EAASW,YAASZ,IAClBJ,GAAa,KAcTZ,OAAQA,EACRC,SAAUA,EACVC,aAAcA","file":"static/js/11.6e268b0c.chunk.js","sourcesContent":["import React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\n\nconst RegisterButton: FC = () => (\n    <Link to=\"/register\">\n        <div className=\"form-group\">\n            <button type=\"button\" className=\"btn btn-primary\">\n                Register\n            </button>\n        </div>\n    </Link>\n)\n\nexport default RegisterButton\n","import React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\n\nconst HomeButton: FC = () => (\n    <Link to=\"/home\">\n        <div className=\"form-group\" style={{ marginLeft: '1rem' }}>\n            <button type=\"button\" className=\"btn btn-outline-primary\">\n                Home\n            </button>\n        </div>\n    </Link>\n)\n\nexport default HomeButton\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC } from 'react'\nimport {\n    UseFormRegister,\n    UseFormHandleSubmit,\n    SubmitHandler,\n    FieldErrors,\n} from 'react-hook-form'\n\ntype TFormValues = { username: string; password: string }\n\ninterface Props {\n    message: string | null\n    isLoading: boolean\n    onSubmit: SubmitHandler<TFormValues>\n    errors: FieldErrors<TFormValues>\n    register: UseFormRegister<TFormValues>\n    handleSubmit: UseFormHandleSubmit<TFormValues>\n}\nconst LoginForm: FC<Props> = ({\n    message,\n    isLoading,\n    onSubmit,\n    errors,\n    register,\n    handleSubmit,\n}) => (\n    <div className=\"form\">\n        <span>\n            <h4>Log in</h4>\n        </span>\n        <div id=\"login\" className=\"register-form\">\n            <form id=\"login\" onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"username\">\n                        Username\n                        <input\n                            defaultValue=\"\"\n                            type=\"text\"\n                            {...register('username')}\n                            className={`form-control ${\n                                errors.username ? 'is-invalid' : ''\n                            }`}\n                        />\n                    </label>\n                    <div className=\"invalid-feedback\">\n                        {errors.username?.message}\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\">\n                        Password\n                        <input\n                            defaultValue=\"\"\n                            type=\"password\"\n                            {...register('password')}\n                            className={`form-control ${\n                                errors.password ? 'is-invalid' : ''\n                            }`}\n                        />\n                    </label>\n                    <div className=\"invalid-feedback\">\n                        {errors.password?.message}\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary btn-block\"\n                        disabled={isLoading}\n                    >\n                        {isLoading && (\n                            <span className=\"spinner-border spinner-border-sm\" />\n                        )}\n                        <span>Login</span>\n                    </button>\n                </div>\n                {message && (\n                    <div className=\"form-group\">\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            {message}\n                        </div>\n                    </div>\n                )}\n            </form>\n        </div>\n    </div>\n)\n\nexport default LoginForm\n","/* eslint-disable react/prop-types */\nimport React, { useState, FC } from 'react'\nimport { useForm, Resolver } from 'react-hook-form'\nimport LoginForm from '../components/login/LoginForm'\nimport HomeButton from '../components/buttons/HomeButton'\nimport RegisterButton from '../components/register/RegisterButton'\nimport { login } from '../redux/slices/auth'\nimport { newError } from '../redux/slices/message'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\n\ntype TFormValues = { username: string; password: string }\n\nconst Login: FC = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const message = useAppSelector((state) => state.auth.error)\n    const dispatch = useAppDispatch()\n\n    const resolver: Resolver<TFormValues> = async (values) => {\n        return {\n            values: values.username && values.password ? values : {},\n            errors:\n                !values.username && values.password\n                    ? {\n                          username: {\n                              type: 'required',\n                              message: 'Username is required.',\n                          },\n                          password: {\n                              type: 'required',\n                              message: 'Password is required.',\n                          },\n                      }\n                    : {},\n        }\n    }\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<TFormValues>({\n        resolver,\n        mode: 'onSubmit',\n    })\n\n    const onSubmit = (data: TFormValues) => {\n        setIsLoading(true)\n        try {\n            dispatch(login(data)).then(() => {\n                setIsLoading(false)\n            })\n        } catch (error: any) {\n            dispatch(newError(error))\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"button-wrapper\">\n                <HomeButton />\n                <RegisterButton />\n            </div>\n            <LoginForm\n                isLoading={isLoading}\n                message={message}\n                onSubmit={onSubmit}\n                errors={errors}\n                register={register}\n                handleSubmit={handleSubmit}\n            />\n        </>\n    )\n}\n\nexport default Login\n"],"sourceRoot":""}