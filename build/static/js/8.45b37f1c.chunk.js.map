{"version":3,"sources":["redux/slices/edit.tsx","components/WarningModal.tsx","components/buttons/LogoutButton.tsx","components/sidebar/Item.tsx","components/sidebar/ItemList.tsx","components/sidebar/SubMenu.tsx","components/sidebar/SubMenuList.tsx","components/CreateModal.tsx","components/buttons/CreateSubMenuButton.tsx","components/sidebar/ClassificationItem.tsx","hooks/useClassifications.tsx","components/sidebar/ClassificationList.tsx","components/buttons/CreateClassificationButton.tsx","containers/Sidebar.tsx","routes/ContentRoutes.tsx","components/content/Content.tsx","components/layout/Footer.tsx","components/UserInfoHeader.tsx","components/DatabaseDropdown.tsx","components/layout/Header.tsx","components/layout/Body.tsx","containers/Dashboard.tsx"],"names":["editDataName","createAsyncThunk","data","thunkApi","a","type","id","textValue","newName","name","api","post","response","dispatch","newMessage","message","editItemName","item","link","deleteData","delete","getAllClassifications","resetClassificationSelection","deleteItem","payload","then","res","removeItem","removeListItem","editingClassification","importData","_","updateData","editSlice","createSlice","initialState","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","reducer","WarningModal","setModal","toggleCallback","actionText","itemText","modalAction","isOpen","toggle","className","color","onClick","LogoutButton","style","marginLeft","eventBus","Item","menuItem","handleItemClick","zIndex","backgroundColor","title","ItemList","parentId","listItems","contentPath","useAppSelector","auth","history","useHistory","useAppDispatch","useCallback","controller","AbortController","undefined","selectedItem","getLinkUrl","push","catch","err","newError","abort","subMenuGroup","map","SubMenuComponent","useState","itemList","setItemList","subMenu","useSubMenu","subMenuObj","isLoading","error","getSubMenu","updateItemList","value","onClickHandler","useEffect","SubMenuItemGroup","subMenus","Object","keys","key","SubMenu","ConfirmModal","handleSubmit","onSubmit","register","Modal","ModalBody","Form","FormGroup","Label","for","Button","ModalFooter","CreateSubMenuButton","modal","classification","resolver","values","errors","useForm","mode","formState","padding","position","height","width","minHeight","CreateModal","formValues","createSubMenu","selected","_id","ClassificationItem","hasSubMenu","setWidth","showEdit","roles","user","ref","useRef","isClassification","handleClassificationClick","current","selectedClassification","handleEditClick","editingSubMenu","editingItems","display","includes","to","fontWeight","textTransform","paddingLeft","length","SubMenuList","useClassifications","props","classifications","subMenuLoading","entities","attempted","setAttempted","setResponse","prevState","classificationsCurrent","unwrapResult","ClassificationList","getClassifications","accessToken","classificationListNode","CreateClassificationButton","createClassification","Sidebar","iconShape","Date","getFullYear","Edit","lazy","EditObject","VideoPlayer","Classification","ContentHome","ProtectedRouteAdmin","ContentRoutes","routePath","isAdmin","fallback","path","exact","component","isAuthenticated","authenticationPath","from","Content","isAuth","setRoutePath","location","useLocation","pathname","Footer","UserInfoHeader","email","fontSize","DatabaseDropdown","dropDownOpen","dropDownToggle","databaseInitToggle","databaseUpdateToggle","Dropdown","DropdownToggle","caret","DropdownMenu","container","DropdownItem","Header","content","setContent","initModal","setInitModal","updateModal","setUpdateModal","setDropdownOpen","switchChecked","setSwitchChecked","get","date","getDate","userRegister","left","handleDiameter","onChange","showEditToggle","checked","Body","withRouter","EventBus","boxSizing"],"mappings":"mZA6CaA,EAAeC,YACxB,gBADwC,uCAExC,WAAOC,EAAsBC,GAA7B,uBAAAC,EAAA,6DACYC,EAAwBH,EAAxBG,KAAMC,EAAkBJ,EAAlBI,GAAIC,EAAcL,EAAdK,UACZC,EAAU,CAAEC,KAAMF,GAF5B,SAG2BG,IAAIC,KAAJ,gBACVN,EADU,iBACGC,GACtBE,GALR,OAGUI,EAHV,OAQIT,EAASU,SAASC,YAAWF,EAASV,KAAKa,UAR/C,2CAFwC,yDAc/BC,EAAef,YACxB,gBADwC,uCAExC,WAAOC,EAAsBC,GAA7B,yBAAAC,EAAA,6DACYC,EAA8BH,EAA9BG,KAAMC,EAAwBJ,EAAxBI,GAAIW,EAAoBf,EAApBe,KAAMV,EAAcL,EAAdK,UAClBC,EAAU,CAAEA,QAASD,EAAWW,KAAMD,EAAKC,KAAMT,KAAMQ,EAAKR,MAFtE,SAG2BC,IAAIC,KAAJ,gBACVN,EADU,sBACQC,GAC3BE,GALR,OAGUI,EAHV,OAQIT,EAASU,SAASC,YAAWF,EAASV,KAAKa,UAR/C,2CAFwC,yDAc/BI,EAAalB,YACtB,eADsC,uCAEtC,WAAOC,EAA0BC,GAAjC,mBAAAC,EAAA,6DACYE,EAAaJ,EAAbI,GAAID,EAASH,EAATG,KADhB,SAE2BK,IAAIU,OAAJ,uBACHf,EADG,YACKC,IAHhC,OAEUM,EAFV,OAKIT,EAASU,SAASQ,eAClBlB,EAASU,SAASS,eAClBnB,EAASU,SAASC,YAAWF,EAASV,KAAKa,UAP/C,2CAFsC,yDAa7BQ,EAAatB,YACtB,eADsC,uCAEtC,WAAOuB,EAA6BrB,GAApC,mBAAAC,EAAA,sDACYE,EAAmBkB,EAAnBlB,GAAID,EAAemB,EAAfnB,KAAMY,EAASO,EAATP,KAClBP,IAAIC,KAAJ,uBACoBN,EADpB,YAC4BC,GACxBW,GACFQ,MAAK,SAACC,GACJvB,EAASU,SAASc,YAAWV,EAAKR,OAClCN,EAASU,SAASC,YAAWY,EAAIxB,KAAKa,UACzB,YAATV,IACAF,EAASU,SAASc,YAAWV,EAAKC,OAClCf,EAASU,SAASe,YAAeX,EAAKC,QAE1Cf,EAASU,SAASgB,aAAsB,OAZhD,2CAFsC,yDAmB7BC,EAAa7B,YACtB,cADsC,uCAEtC,WAAO8B,EAAG5B,GAAV,eAAAC,EAAA,sEAC2BM,IAAIU,OAAO,iBAAiBK,MAAK,WACpDtB,EAASU,SAASC,YAAW,8BAC7BJ,IAAIC,KAAK,cAAcc,MACnB,SAACC,GACGvB,EAASU,SAASQ,eAClBlB,EAASU,SAASC,YAAWY,EAAIxB,KAAKa,gBANtD,cACUH,EADV,yBAUWA,GAVX,2CAFsC,yDAgB7BoB,EAAa/B,YAAiB,cAAD,uCAAgB,WAAO8B,EAAG5B,GAAV,SAAAC,EAAA,+EACtDM,IACKC,KAAK,sBACLc,MAAK,SAACC,GACHvB,EAASU,SAASQ,eAClBlB,EAASU,SAASC,YAAWY,EAAIxB,KAAKa,cALQ,2CAAhB,yDASpCkB,EAAYC,YAAY,CAC1BzB,KAAM,OACN0B,aA3FsC,CACtCC,QAAS,QA2FTC,SAAU,GACVC,cAAe,SAACC,GACZA,EAAQC,QAAQxC,EAAayC,SAAS,SAACC,GACnCA,EAAMN,QAAU,aAEpBG,EAAQC,QAAQxC,EAAa2C,WAAW,SAACD,GACrCA,EAAMN,QAAU,gBAEpBG,EAAQC,QAAQjB,EAAWkB,SAAS,SAACC,GACjCA,EAAMN,QAAU,aAEpBG,EAAQC,QAAQjB,EAAWoB,WAAW,SAACD,GACnCA,EAAMN,QAAU,mBAKDH,EAAUW,QAEtBX,EAAf,S,iCCxJA,oDAwCeY,IA7BiB,SAAC,GAM1B,IALHC,EAKE,EALFA,SACAC,EAIE,EAJFA,eACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,SACAC,EACE,EADFA,YAEA,OACI,8BACI,eAAC,IAAD,CAAOC,OAAQL,EAAUM,OAAQL,EAAjC,UACI,cAAC,IAAD,UACI,oBAAGM,UAAU,oBAAb,UACKL,EAAY,IACb,sBAAMK,UAAU,mBAAhB,SAAoCJ,IAFxC,SAKJ,eAAC,IAAD,WACI,cAAC,IAAD,CAAQK,MAAM,UAAUC,QAASL,EAAjC,qBAEU,IACV,cAAC,IAAD,CAAQI,MAAM,YAAYC,QAASR,EAAnC,8B,iCC/BpB,wBAiBeS,IAdU,WACrB,OACI,qBAAKH,UAAU,aAAaI,MAAO,CAAEC,WAAY,QAAjD,SACI,wBACIrD,KAAK,SACLgD,UAAU,0BACVE,QAAS,kBAAMI,IAAS9C,SAAS,WAHrC,wB,kICkBG+C,EAfS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBACzB5C,EAAe2C,EAAf3C,KAAMT,EAASoD,EAATpD,KAEd,OACI,cAAC,IAAD,CACIgD,MAAO,CAAEM,OAAQ,GAAIC,gBAAiB,WAEtCC,MAAOxD,EACP8C,QAAS,kBAAMO,EAAgBD,IAJnC,SAMKpD,GANL,aAEeA,EAFf,YAEuBS,KCwChBgD,EAtCa,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAC7BC,EAAgBC,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,QAAhDF,YACFG,EAAUC,cACV5D,EAAW6D,cAEXZ,EAAkBa,uBACpB,SAACd,GACG,IAAMe,EAAa,IAAIC,gBAavB,YAXiBC,IAAbX,GAA0BE,IAC1BxD,EAASkE,YAAa,CAAEZ,WAAUlD,KAAM4C,KACxChD,EAASmE,YAAWnB,EAAS3C,OACxBO,MAAK,WACF+C,EAAQS,KAAR,UAAgBZ,EAAhB,kBAAqCR,EAAS3C,UAEjDgE,OAAM,SAACC,GACJtE,EAASuE,YAASD,IAClBX,EAAQS,KAAKZ,OAGlB,kBAAMO,EAAWS,WAE5B,CAAChB,EAAaG,EAAS3D,EAAUsD,IAE/BmB,EACFlB,GACAA,EAAUmB,KAAI,SAACtE,GAAD,OACV,cAAC,EAAD,CAEI4C,SAAU5C,EACV6C,gBAAiBA,EAHrB,SAKK7C,EAAKR,MAJDQ,EAAKC,SAOtB,OAAO,mCAAGoE,KCQCE,EA7CqB,SAAC,GAAmB,IAAjBlF,EAAgB,EAAhBA,GAAI2D,EAAY,EAAZA,MAAY,EACnBwB,mBAA2B,IADR,mBAC5CC,EAD4C,KAClCC,EADkC,KAE3CvD,EAAYkC,aAAe,SAAC5B,GAAD,OAAWA,EAAMkD,WAA5CxD,QAF2C,EAGpByD,YAAW,CACtCvF,KACAwF,WAAY,GACZC,WAAW,EACXC,MAAO,OAPwC,mBAG5CpF,EAH4C,KAGlCqF,EAHkC,KAS3CH,EAAelF,EAAfkF,WAMFI,EAAiBvB,uBAAY,WAJhB,IAACwB,KAKDL,EAAWJ,WAJLS,GAKjBR,EAAYG,EAAWJ,YAE5B,CAACI,IAEEM,EAAiBzB,uBAAY,WAC1B/D,EAASmF,WACVE,MAEL,CAACA,EAAYrF,IAQhB,OANAyF,qBAAU,WACU,eAAZjE,GAA6BxB,EAASmF,WACtCG,MAEL,CAAC9D,EAAS8D,EAAgBtF,IAGzB,cAAC,IAAD,CACI6C,MAAO,CAAEM,OAAQ,EAAGC,gBAAiB,WAErCC,MAAOA,EACPV,QAAS6C,EAJb,SAMI,cAAC,EAAD,CAAUjC,SAAU7D,EAAI8D,UAAWsB,KANvC,YAEcpF,KC7BPgG,EAZqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7BjB,EAAekB,OAAOC,KAAKF,GAAUhB,KAAI,SAACmB,GAC5C,OACI,cAACC,EAAD,CAEIrG,GAAIiG,EAASG,GACbzC,MAAOyC,GAFFH,EAASG,OAM1B,OAAO,mCAAGpB,K,+HC8CCsB,EAtCiB,SAAC,GAO1B,IANH9D,EAME,EANFA,SACAC,EAKE,EALFA,eACAC,EAIE,EAJFA,WACA6D,EAGE,EAHFA,aACAC,EAEE,EAFFA,SACAC,EACE,EADFA,SAEA,OACI,8BACI,eAACC,EAAA,EAAD,CAAO7D,OAAQL,EAAUM,OAAQL,EAAjC,UACI,cAACkE,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMJ,SAAUD,EAAaC,GAA7B,UACI,oBAAGzD,UAAU,oBAAb,UAAkCL,EAAlC,OACA,eAACmE,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,IAAI,OAAX,SACI,sBAAMhE,UAAU,YAAhB,sBAEJ,mCACIA,UAAU,gBACN0D,EAAS,aAGrB,cAACO,EAAA,EAAD,CAAQhE,MAAM,UAAUjD,KAAK,SAA7B,0BAKR,cAACkH,EAAA,EAAD,UACI,cAACD,EAAA,EAAD,CAAQhE,MAAM,YAAYC,QAASR,EAAnC,4BC2BLyE,EA1EiB,WAAO,IAAD,EACR/B,oBAAS,GADD,mBAC3BgC,EAD2B,KACpB3E,EADoB,KAE5BjC,EAAW6D,cACTgD,EAAmBpD,aAAe,SAAC5B,GAAD,OAAWA,KAA7CgF,eAEFC,EAA+B,uCAAG,WAAOC,GAAP,SAAAxH,EAAA,+EAC7B,CACHwH,OAAQA,EAAOnH,KAAOmH,EAAS,GAC/BC,OAASD,EAAOnH,KAOV,GANA,CACIA,KAAM,CACFJ,KAAM,WACNU,QAAS,oCAPS,2CAAH,sDALH,EAsB9B+G,YAAqB,CAAEH,WAAUI,KAAM,aAHvChB,EAnB8B,EAmB9BA,SACAF,EApB8B,EAoB9BA,aACagB,EArBiB,EAqB9BG,UAAaH,OAGXzE,EAASuB,uBAAY,WACvB7B,GAAU2E,KACX,CAACA,IAeJ,OACI,qCACI,wBACIhE,MAAO,CACHwE,QAAS,IAGTC,SAAU,WACVC,OAAQ,OACRC,MAAO,OACPC,UAAW,GAEf/H,GAAG,wBACHD,KAAK,SACLgD,UAAU,sCACVE,QAASH,EAbb,SAeI,8BACI,cAAC,IAAD,QAGR,cAACkF,EAAD,CACItF,WAAW,cACX+D,SAAUA,EACVD,SArCK,SAACyB,GAA6B,IACnC9H,EAAS8H,EAAT9H,KACHoH,EAAOpH,MACRI,EACI2H,YAAc,CACVd,eAAgBA,EAAee,SAASC,IACxCjI,UAIZ2C,KA4BQyD,aAAcA,EACd/D,SAAU2E,EACV1E,eAAgBK,QC8EjBuF,EAxIuB,SAAC,GAAwB,IAAtBjB,EAAqB,EAArBA,eAC7BgB,EAA+ChB,EAA/CgB,IAAKjI,EAA0CiH,EAA1CjH,KAAMmI,EAAoClB,EAApCkB,WAAYxE,EAAwBsD,EAAxBtD,UAAWmC,EAAamB,EAAbnB,SADgB,EAEhCd,mBAAS,SAFuB,mBAEnD2C,EAFmD,KAE5CS,EAF4C,KAGlDC,EAAaxE,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,QAA7CuE,SACFC,EAAQzE,aAAe,SAAC5B,GAAD,uBAAWA,EAAM6B,KAAKyE,YAAtB,aAAW,EAAiBD,SACnDlI,EAAW6D,cACXuE,EAAMC,iBAAO,MAEbC,EAAmB,SAAChD,GACtB,QAASA,KAAYA,GAGnBiD,EAA4BzE,uBAAY,WACtCsE,EAAII,SACAF,EAAiBzB,IACjB7G,EAASyI,YAAuB5B,IAAiBjG,MAAK,WAClDkC,IAAS9C,SAAS,oBAI/B,CAAC6G,EAAgB7G,IAEd0I,EAAkB5E,uBAAY,WAC5BwE,EAAiBzB,KACjB7G,EAASgB,aAAsB,IAC/BhB,EAAS2I,aAAe,IACxB3I,EAAS4I,aAAa,IACtB5I,EAASyI,YAAuB5B,IAAiBjG,MAAK,WAClDkC,IAAS9C,SAAS,qBAG3B,CAAC6G,EAAgB7G,IAOpB,OALAwF,qBAAU,WACFyC,GACAD,EAAS,WAEd,CAACC,IAEA,mCACI,sBAAwCrF,MAAO,CAAEiG,QAAS,QAA1D,UACKX,GAASA,EAAMY,SAAS,eAAiBb,GACtC,yBACIrF,MAAO,CAAEC,WAAY,QAErBrD,KAAK,SACLgD,UAAU,wCACVE,QAASgG,EALb,UAOI,cAAC,IAAD,CAAMK,GAAE,gCAA2BlB,KACnC,gCACI,cAAC,IAAD,QATR,qBAEuBA,IAW3B,eAAC,IAAD,CACIO,IAAKA,EACLxF,MAAO,CACH2E,QACAyB,WAAY,OACZ9F,OAAQ,EACR+F,cAAe,YACfC,YAAa,GAEjBzJ,GAAE,eAAUoI,GAEZzE,MAAOxD,EACP8C,QAAS6F,EAZb,UAcKR,GACmD,IAAhDpC,OAAOC,KAAKiB,EAAenB,UAAUyD,QACjC,qCAUKjB,GACGA,EAAMY,SAAS,eACfb,GAAY,cAAC,EAAD,IAchB,cAACmB,EAAD,CAEI1D,SAAUA,GAFd,iBACmBmC,OAK9BtE,GAAiD,IAApCsD,EAAetD,UAAU4F,QACnC,mCAmBI,cAAC,EAAD,CAEI7F,SAAUuE,EACVtE,UAAWA,GAHf,mBACqBsE,QArEjC,YAUcA,MAzBlB,8BAAiCA,O,OCW9BwB,EA3DY,SAACC,GAAuC,IACvDC,EAAsCD,EAAtCC,gBAAiBrE,EAAqBoE,EAArBpE,UAAWC,EAAUmE,EAAVnE,MAC9BqE,EAAiB/F,aAAe,SAAC5B,GAAD,OAAWA,EAAMkD,QAAQxD,WACvDkI,EAAahG,aAAe,SAAC5B,GAAD,OAAWA,EAAMgF,kBAA7C4C,SACFzJ,EAAW6D,cAJ6C,EAK5Be,oBAAS,GALmB,mBAKvD8E,EALuD,KAK5CC,EAL4C,OAM9B/E,mBAAS,CACrC2E,kBACArE,YACAC,UAT0D,mBAMvDpF,EANuD,KAM7C6J,EAN6C,KAwD9D,MAAO,CAAC7J,EAvCmB+D,uBAAY,WACnC8F,GAAY,SAACC,GAAD,mBAAC,eAAoBA,GAArB,IAAgC3E,WAAW,OACvD,IAAM4E,EAA4CL,OAEnBxF,IAA3B6F,GACkC,IAAlCA,EAAuBX,OAEvBS,EAAY,CACRL,gBAAiBO,EACjB5E,WAAW,EACXC,MAAO,OAGQ,YAAnBqE,QACavF,IAAbwF,GACoB,IAApBA,EAASN,QACRO,IAEDC,GAAa,GACb3J,EAASQ,eACJI,KAAKmJ,KACLnJ,MAAK,SAACC,GACH,IA1BZyE,EA0BqCzE,IAxBhByE,EAwBsB,MAEIrB,IADmBpD,GAE9C+I,EAAY,CACRL,gBAH0C1I,EAI1CqE,WAAW,EACXC,MAAO,OAjCN,IACzBG,KAqCSjB,OAAM,SAACC,GACJtE,EAASuE,YAASD,EAAIpE,gBAInC,CAACF,EAAUyJ,EAAUD,EAAgBE,MCxB7BM,EAnCgB,WAAO,IAAD,EACPvG,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,QAAlDyE,EADyB,EACzBA,KAAM5G,EADmB,EACnBA,QADmB,EAEM8H,EAAmB,CACtDE,gBAAiB,GACjBrE,WAAW,EACXC,MAAO,OALsB,mBAE1BpF,EAF0B,KAEhBkK,EAFgB,KAOzB/E,EAA+BnF,EAA/BmF,UAAWqE,EAAoBxJ,EAApBwJ,gBAMnB/D,qBAAU,WACU,eAAZjE,GAA4B4G,EAAK+B,aAAaD,MACnD,CAACA,EAAoB1I,EAAS4G,IAEjC,IAR2B7C,EAQrB6E,GACDjF,QACmBjB,IAApBsF,OAVuBjE,EAWLiE,MAVGjE,IAWrBiE,EAAgB7E,KAAI,SAACmC,GACjB,OAEI,aADA,CACC,EAAD,CAEIA,eAAgBA,GAFpB,kBACoBA,EAAegB,SAO/C,OAAO,mCAAGsC,KC0CCC,EAxEwB,WAAO,IAAD,EACfxF,oBAAS,GADM,mBAClCgC,EADkC,KAC3B3E,EAD2B,KAEnCjC,EAAW6D,cAEXiD,EAA+B,uCAAG,WAAOC,GAAP,SAAAxH,EAAA,+EAC7B,CACHwH,OAAQA,EAAOnH,KAAOmH,EAAS,GAC/BC,OAASD,EAAOnH,KAOV,GANA,CACIA,KAAM,CACFJ,KAAM,WACNU,QAAS,2CAPS,2CAAH,sDAJI,EAqBrC+G,YAAqB,CAAEH,WAAUI,KAAM,aAHvChB,EAlBqC,EAkBrCA,SACAF,EAnBqC,EAmBrCA,aACagB,EApBwB,EAoBrCG,UAAaH,OAGXzE,EAASuB,uBAAY,WACvB7B,GAAU2E,KACX,CAACA,IAcJ,OACI,qCACI,wBACIhE,MAAO,CACHwE,QAAS,IAGTC,SAAU,WACVC,OAAQ,OACRC,MAAO,OACPC,UAAW,GAEf/H,GAAG,wBACHD,KAAK,SACLgD,UAAU,sCACVE,QAASH,EAbb,SAeI,8BACI,cAAC,IAAD,QAGR,cAACkF,EAAD,CACItF,WAAW,4BACX+D,SAAUA,EACVD,SApCK,SAACyB,GAA6B,IACnC9H,EAAS8H,EAAT9H,KACHoH,EAAOpH,MACRI,EACIqK,YAAqB,CACjBzK,UAIZ2C,KA4BQyD,aAAcA,EACd/D,SAAU2E,EACV1E,eAAgBK,QC9BjB+H,EA/BK,WAAO,IACfrC,EAAaxE,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,QAA7CuE,SAER,OACI,qBAAKzF,UAAU,UAAf,SACI,eAAC,IAAD,WACI,qBAAKA,UAAU,mBAAf,SACI,eAAC,IAAD,CAAeI,MAAO,CAAEiG,QAAS,QAAjC,UACKZ,GAAY,cAAC,EAAD,IACb,mBAAGzF,UAAU,0BAAb,kCAKR,qBAAKA,UAAU,oBAAf,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAM+H,UAAU,SAAhB,SACI,cAAC,EAAD,UAIZ,qBAAK/H,UAAU,mBAAf,SACI,cAAC,IAAD,UACI,2CAAa,IAAIgI,MAAOC,2B,iBChC1CC,EAAOC,gBAAK,kBAAM,kCAClBC,EAAaD,gBAAK,kBAAM,kCACxBE,EAAcF,gBAAK,kBAAM,wDACzBG,EAAiBH,gBAAK,kBAAM,kCAC5BI,EAAcJ,gBAAK,kBAAM,iCACzBK,EAAsBL,gBAAK,kBAAM,kCAoDxBM,EA9CkB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACxBhD,EAAUzE,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,KAAKyE,QAA/CD,MAEFiD,EAAoB,OAAVjD,GAAkBA,EAAMY,SAAS,cACjD,OACI,cAAC,WAAD,CACIsC,SACI,qBAAK5I,UAAU,UAAf,SACI,cAAC,IAAD,MAHZ,SAOI,eAAC,IAAD,WACI,cAAC,IAAD,CACI6I,KAAI,UAAKH,EAAL,SACJI,OAAK,EACLC,UAAWR,IAEf,cAAC,IAAD,CACIM,KAAI,UAAKH,EAAL,uBACJK,UAAWT,IAEf,cAACE,EAAD,CACIQ,gBAAiBL,EACjBE,KAAI,UAAKH,EAAL,aACJO,mBAAkB,UAAKP,GACvBK,UAAWb,IAEf,cAAC,IAAD,CACIW,KAAK,4BACLE,UAAWX,IAEf,cAAC,IAAD,CACIS,KAAI,UAAKH,EAAL,cACJK,UAAWV,IAEf,cAAC,IAAD,CACIa,KAAI,UAAKR,GACTnC,GAAE,UAAKmC,EAAL,SACFI,OAAK,UCfVK,EAjCK,WAAO,IAAD,EAMNrG,EANM,EACgB7B,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,QAA9DkI,EADc,EACdA,OAAQzD,EADM,EACNA,KAAM3E,EADA,EACAA,YADA,EAEYoB,mBAAS,cAFrB,mBAEfsG,EAFe,KAEJW,EAFI,KAGhBC,EAAWC,cACXpI,EAAUC,cAKVuH,KAHU7F,EAGO6C,MAFE7C,IAET,UAAgB6C,EAAKD,aAArB,aAAgB,EAAYY,SAAS,eAQrD,OANAtD,qBAAU,WACF2F,GACAU,EAAa,sBAElB,CAACV,IAEGS,GAAUpI,EACb,sBAAKhB,UAAU,UAAf,UACKsJ,EAASE,WAAT,UAAyBxI,EAAzB,UACG,cAACiD,EAAA,EAAD,CACI7D,MAAO,CAAEyE,SAAU,WAAYnE,OAAQ,KACvCR,QAAS,kBAAMiB,EAAQS,KAAKZ,IAFhC,SAII,8BACI,cAAC,IAAD,QAIZ,cAAC,EAAD,CAAe0H,UAAWA,OAE9B,MC3BOe,EATI,kBACf,iCACI,qDACsB,IAAIzB,MAAOC,cADjC,2C,4BCSOyB,GARmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC9B,qBACIvJ,MAAO,CAAEwJ,SAAU,SAAU3J,MAAO,WACpCD,UAAU,aAFd,SAIK2J,K,6ECyBME,GArBqB,SAAC,GAK9B,IAJHC,EAIE,EAJFA,aACAC,EAGE,EAHFA,eACAC,EAEE,EAFFA,mBACAC,EACE,EADFA,qBAEA,OACI,eAACC,GAAA,EAAD,CAAUpK,OAAQgK,EAAc/J,OAAQgK,EAAxC,UACI,cAACI,GAAA,EAAD,CAAgBC,OAAK,EAArB,sBACA,eAACC,GAAA,EAAD,CAAcC,UAAU,OAAxB,UACI,cAACC,GAAA,EAAD,CAAcrK,QAAS8J,EAAvB,SACI,sBAAMhK,UAAU,YAAhB,8BAEJ,cAACuK,GAAA,EAAD,CAAcrK,QAAS+J,EAAvB,SACI,sBAAMjK,UAAU,YAAhB,sCCoGLwK,GAjHI,WAAO,IAAD,EAUL1H,EATR5B,EAASD,aAAe,SAAC5B,GAAD,OAAWA,KAAnC6B,KACAyE,EAAmBzE,EAAnByE,KAAMF,EAAavE,EAAbuE,SAFO,EAGSrD,mBAAwB,MAHjC,mBAGdqI,EAHc,KAGLC,EAHK,OAIatI,oBAAS,GAJtB,mBAIduI,EAJc,KAIHC,EAJG,OAKiBxI,oBAAS,GAL1B,mBAKdyI,EALc,KAKDC,EALC,OAMmB1I,oBAAS,GAN5B,mBAMd0H,EANc,KAMAiB,EANA,OAOqB3I,oBAAS,GAP9B,mBAOd4I,EAPc,KAOCC,EAPD,KAQftC,EAAO,UAAGhD,EAAKD,aAAR,aAAG,EAAYY,SAAS,cAC/B9I,EAAW6D,cAUX2I,EAAqB1I,uBAAY,WACnCsJ,GAAcD,KACf,CAACA,IAEEV,EAAuB3I,uBAAY,WACrCwJ,GAAgBD,KACjB,CAACA,IA0BJ,OAdA7H,qBAAU,YACO,uCAAG,4BAAAjG,EAAA,sEACOM,KAAI6N,IAAJ,QADP,OACNC,EADM,OAEZT,EAAWS,EAAKtO,MAFJ,2CAAH,qDAIbuO,KACD,IAEHpI,qBAAU,WACFgI,IAAkBvF,GAClBwF,EAAiBxF,KAEtB,CAACuF,EAAevF,IAGf,qCACI,wBAAQrF,MAAO,CAAEM,OAAQ,IAAzB,SACI,sBAAKV,UAAU,iBAAf,UACI,qBAAKA,UAAU,OAAf,SAAuByK,IACtB9B,GAAWlD,GACR,qBACIzF,UAAU,aACVI,MAAO,CAAEC,WAAY,QAFzB,SAII,cAAC,GAAD,CACIyJ,aAAcA,EACdC,eA9CL,kBAAMgB,GAAiBjB,IA+ClBE,mBAAoBA,EACpBC,qBAAsBA,MAKlC,cAAC,KAAD,IACCtE,EAAKgE,QA7DN7G,EA6DsBuI,OA5DzBvI,KAAYA,IA6DL,cAAC,GAAD,CAAgB6G,MAAOhE,EAAKgE,QAE/BhB,GACG,qBACIvI,MAAO,CACHyE,SAAU,WACVyG,KAAM,QAHd,SAMI,gCACI,cAAC,IAAD,CACIxG,OAAQ,GACRC,MAAO,GACPwG,eAAgB,GAChBC,SAzEL,WACvBhO,EAASiO,gBACTR,GAAkBD,IAwEUU,QAASV,aAQjC,cAACxL,GAAA,EAAD,CACIG,WAAW,aACXC,SAAS,WACTH,SAAUkL,EACVjL,eAAgBsK,EAChBnK,YAzEe,WACvBrC,EAASiB,gBAAcoD,OAAM,SAACxD,GAC1Bb,EAASuE,YAAS1D,EAAIxB,KAAKa,aAE/BsM,OAuEI,cAACxK,GAAA,EAAD,CACIG,WAAW,cACXC,SAAS,WACTH,SAAUoL,EACVnL,eAAgBuK,EAChBpK,YA1EiB,WACzBrC,EAASmB,gBACTsL,WCnCO0B,GAVE,WACb,OACI,sBAAK3L,UAAU,OAAf,UACI,cAAC,GAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCYG4L,uBAhBG,WAAO,IACbxC,EAAWnI,aAAe,SAAC5B,GAAD,OAAWA,EAAM6B,QAA3CkI,OAQR,OANApG,qBAAU,WACDoG,GACDyC,IAASrO,SAAS,YAEvB,CAAC4L,IAGA,sBAAKhJ,MAAO,CAAE0L,UAAW,aAAc9G,UAAW,SAAlD,UACI,cAAC,EAAD,IACA,cAAC,GAAD","file":"static/js/8.45b37f1c.chunk.js","sourcesContent":["/* eslint-disable import/no-named-as-default */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { AxiosResponse } from 'axios'\nimport { IListItem, IMessageResponse } from '../../schemas'\nimport { api } from '../../service/api'\nimport {\n    getAllClassifications,\n    resetClassificationSelection,\n    editingClassification,\n} from './classification'\nimport { removeListItem } from './subMenu'\nimport { removeItem } from './item'\nimport { newMessage } from './message'\n\ntype TDeleteItemPayload = {\n    id: string\n    type: 'subMenu' | 'classification'\n    item: IListItem\n}\ntype TDeleteDataPayload = {\n    id: string\n    type: 'subMenu' | 'classification'\n}\ntype TDataNamePayload = { name: string }\ntype TDataNameProps = {\n    id: string\n    textValue: string\n    type: 'subMenu' | 'classification'\n}\ntype TItemNameProps = {\n    id: string\n    textValue: string\n    item: IListItem\n    type: 'subMenu' | 'classification'\n}\ninterface editSliceState {\n    loading: 'pending' | 'idle' | 'successful'\n}\n\nconst initialSliceState: editSliceState = {\n    loading: 'idle',\n}\n\nexport const editDataName = createAsyncThunk(\n    'edit/dataName',\n    async (data: TDataNameProps, thunkApi) => {\n        const { type, id, textValue } = data\n        const newName = { name: textValue }\n        const response = await api.post<TDataNamePayload, AxiosResponse>(\n            `/edit/${type}/name/${id}`,\n            newName\n        )\n        // thunkApi.dispatch(getAllClassifications())\n        thunkApi.dispatch(newMessage(response.data.message))\n    }\n)\n\nexport const editItemName = createAsyncThunk(\n    'edit/itemName',\n    async (data: TItemNameProps, thunkApi) => {\n        const { type, id, item, textValue } = data\n        const newName = { newName: textValue, link: item.link, name: item.name }\n        const response = await api.post<TDataNamePayload, AxiosResponse>(\n            `/edit/${type}/item/name/${id}`,\n            newName\n        )\n        // thunkApi.dispatch(getAllClassifications())\n        thunkApi.dispatch(newMessage(response.data.message))\n    }\n)\n\nexport const deleteData = createAsyncThunk(\n    'items/delete',\n    async (data: TDeleteDataPayload, thunkApi) => {\n        const { id, type } = data\n        const response = await api.delete<TDataNamePayload, AxiosResponse>(\n            `/delete-data/${type}/${id}`\n        )\n        thunkApi.dispatch(getAllClassifications())\n        thunkApi.dispatch(resetClassificationSelection())\n        thunkApi.dispatch(newMessage(response.data.message))\n    }\n)\n\nexport const deleteItem = createAsyncThunk(\n    'items/delete',\n    async (payload: TDeleteItemPayload, thunkApi) => {\n        const { id, type, item } = payload\n        api.post<IListItem, AxiosResponse>(\n            `/delete-item/${type}/${id}`,\n            item\n        ).then((res: AxiosResponse<IMessageResponse>) => {\n            thunkApi.dispatch(removeItem(item.name))\n            thunkApi.dispatch(newMessage(res.data.message))\n            if (type === 'subMenu') {\n                thunkApi.dispatch(removeItem(item.link)) // remove from item slice\n                thunkApi.dispatch(removeListItem(item.link)) // remove from subMenu slice\n            }\n            thunkApi.dispatch(editingClassification(true))\n        })\n    }\n)\n\nexport const importData = createAsyncThunk(\n    'edit/import',\n    async (_, thunkApi) => {\n        const response = await api.delete('/tables/clear').then(() => {\n            thunkApi.dispatch(newMessage('Initializing the database'))\n            api.post('/S3/update').then(\n                (res: AxiosResponse<IMessageResponse>) => {\n                    thunkApi.dispatch(getAllClassifications())\n                    thunkApi.dispatch(newMessage(res.data.message))\n                }\n            )\n        })\n        return response\n    }\n)\n\nexport const updateData = createAsyncThunk('edit/update', async (_, thunkApi) =>\n    api\n        .post('/S3/update/newData')\n        .then((res: AxiosResponse<IMessageResponse>) => {\n            thunkApi.dispatch(getAllClassifications())\n            thunkApi.dispatch(newMessage(res.data.message))\n        })\n)\n\nconst editSlice = createSlice({\n    name: 'edit',\n    initialState: initialSliceState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(editDataName.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(editDataName.fulfilled, (state) => {\n            state.loading = 'successful'\n        })\n        builder.addCase(deleteItem.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(deleteItem.fulfilled, (state) => {\n            state.loading = 'successful'\n        })\n    },\n})\n\nexport const editReducer = editSlice.reducer\n\nexport default editSlice.reducer\n","import React, { FC } from 'react'\nimport { Button, Modal, ModalBody, ModalFooter } from 'reactstrap'\n\ninterface Props {\n    setModal: boolean\n    toggleCallback: () => void\n    actionText: string\n    itemText: string\n    modalAction: () => void\n}\n\nconst WarningModal: FC<Props> = ({\n    setModal,\n    toggleCallback,\n    actionText,\n    itemText,\n    modalAction,\n}) => {\n    return (\n        <div>\n            <Modal isOpen={setModal} toggle={toggleCallback}>\n                <ModalBody>\n                    <p className=\"span-text___light\">\n                        {actionText}{' '}\n                        <span className=\"span-text___bold\">{itemText}</span>?\n                    </p>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"primary\" onClick={modalAction}>\n                        Confirm\n                    </Button>{' '}\n                    <Button color=\"secondary\" onClick={toggleCallback}>\n                        Cancel\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    )\n}\n\nexport default WarningModal\n","import React, { FC } from 'react'\nimport eventBus from '../../common/EventBus'\n\nconst LogoutButton: FC = () => {\n    return (\n        <div className=\"form-group\" style={{ marginLeft: '1rem' }}>\n            <button\n                type=\"button\"\n                className=\"btn btn-outline-primary\"\n                onClick={() => eventBus.dispatch('logout')}\n            >\n                Logout\n            </button>\n        </div>\n    )\n}\n\nexport default LogoutButton\n","import { MenuItem } from 'react-pro-sidebar'\nimport React, { FC } from 'react'\nimport { IListItem } from '../../schemas'\n\ninterface Props {\n    menuItem: IListItem\n    handleItemClick: (menuItem: IListItem) => void\n}\n\nconst Item: FC<Props> = ({ menuItem, handleItemClick }) => {\n    const { link, name } = menuItem\n\n    return (\n        <MenuItem\n            style={{ zIndex: 10, backgroundColor: '#DEE2E6' }}\n            key={`mi-${name}/${link}`}\n            title={name}\n            onClick={() => handleItemClick(menuItem)}\n        >\n            {name}\n        </MenuItem>\n    )\n}\n\nexport default Item\n","/* eslint-disable react/require-default-props */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-underscore-dangle */\nimport React, { FC, useCallback } from 'react'\nimport { useHistory } from 'react-router'\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport { selectedItem, getLinkUrl } from '../../redux/slices/item'\nimport { newError } from '../../redux/slices/message'\nimport { IListItem } from '../../schemas'\nimport Item from './Item'\n\ninterface Props {\n    listItems: IListItem[]\n    parentId: string\n}\n\nconst ItemList: FC<Props> = ({ parentId, listItems }) => {\n    const { contentPath } = useAppSelector((state) => state.auth)\n    const history = useHistory()\n    const dispatch = useAppDispatch()\n\n    const handleItemClick = useCallback(\n        (menuItem: IListItem) => {\n            const controller = new AbortController()\n\n            if (parentId !== undefined && contentPath) {\n                dispatch(selectedItem({ parentId, item: menuItem }))\n                dispatch(getLinkUrl(menuItem.link))\n                    .then(() => {\n                        history.push(`${contentPath}/video/${menuItem.link}`)\n                    })\n                    .catch((err) => {\n                        dispatch(newError(err))\n                        history.push(contentPath)\n                    })\n            }\n            return () => controller.abort()\n        },\n        [contentPath, history, dispatch, parentId]\n    )\n    const subMenuGroup =\n        listItems &&\n        listItems.map((item) => (\n            <Item\n                key={item.link}\n                menuItem={item}\n                handleItemClick={handleItemClick}\n            >\n                {item.name}\n            </Item>\n        ))\n    return <>{subMenuGroup}</>\n}\n\nexport default ItemList\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, { FC, useState, useCallback, useEffect } from 'react'\nimport { SubMenu } from 'react-pro-sidebar'\nimport useSubMenu from '../../hooks/useSubMenu'\nimport ItemList from './ItemList'\nimport { IListItem } from '../../schemas'\nimport { useAppSelector } from '../../redux/hooks'\n\ninterface Props {\n    id: string\n    title: string\n}\n\nconst SubMenuComponent: FC<Props> = ({ id, title }) => {\n    const [itemList, setItemList] = useState<IListItem[] | []>([])\n    const { loading } = useAppSelector((state) => state.subMenu)\n    const [response, getSubMenu] = useSubMenu({\n        id,\n        subMenuObj: {},\n        isLoading: false,\n        error: null,\n    })\n    const { subMenuObj } = response\n\n    const isItemList = (value: unknown): value is IListItem[] => {\n        return !!value && !!(value as IListItem[])\n    }\n\n    const updateItemList = useCallback(() => {\n        if (isItemList(subMenuObj.itemList)) {\n            setItemList(subMenuObj.itemList)\n        }\n    }, [subMenuObj])\n\n    const onClickHandler = useCallback(() => {\n        if (!response.isLoading) {\n            getSubMenu()\n        }\n    }, [getSubMenu, response])\n\n    useEffect(() => {\n        if (loading === 'successful' && !response.isLoading) {\n            updateItemList()\n        }\n    }, [loading, updateItemList, response])\n\n    return (\n        <SubMenu\n            style={{ zIndex: 5, backgroundColor: '#DEE2E6' }}\n            key={`sm${id}`}\n            title={title}\n            onClick={onClickHandler}\n        >\n            <ItemList parentId={id} listItems={itemList} />\n        </SubMenu>\n    )\n}\n\nexport default SubMenuComponent\n","/* eslint-disable react/no-children-prop */\n/* eslint-disable react/prop-types */\nimport React, { FC } from 'react'\nimport SubMenuComponent from './SubMenu'\nimport { ISubMenu } from '../../schemas'\n\ninterface Props {\n    subMenus: ISubMenu[]\n}\n\nconst SubMenuItemGroup: FC<Props> = ({ subMenus }) => {\n    const subMenuGroup = Object.keys(subMenus).map((key: string) => {\n        return (\n            <SubMenuComponent\n                key={subMenus[key]}\n                id={subMenus[key]}\n                title={key}\n            />\n        )\n    })\n    return <>{subMenuGroup}</>\n}\nexport default SubMenuItemGroup\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC } from 'react'\nimport {\n    Button,\n    Modal,\n    FormGroup,\n    ModalBody,\n    ModalFooter,\n    Label,\n    Form,\n} from 'reactstrap'\nimport {\n    UseFormRegister,\n    UseFormHandleSubmit,\n    SubmitHandler,\n} from 'react-hook-form'\n\ntype TFormValues = { name: string }\n\ninterface Props {\n    setModal: boolean\n    onSubmit: SubmitHandler<TFormValues>\n    handleSubmit: UseFormHandleSubmit<TFormValues>\n    toggleCallback: () => void\n    actionText: string\n    register: UseFormRegister<TFormValues>\n}\n\nconst ConfirmModal: FC<Props> = ({\n    setModal,\n    toggleCallback,\n    actionText,\n    handleSubmit,\n    onSubmit,\n    register,\n}) => {\n    return (\n        <div>\n            <Modal isOpen={setModal} toggle={toggleCallback}>\n                <ModalBody>\n                    <Form onSubmit={handleSubmit(onSubmit)}>\n                        <p className=\"span-text___light\">{actionText} </p>\n                        <FormGroup>\n                            <Label for=\"name\">\n                                <span className=\"span-text\">Name: </span>\n                            </Label>\n                            <input\n                                className=\"form-control\"\n                                {...register('name')}\n                            />\n                        </FormGroup>\n                        <Button color=\"primary\" type=\"submit\">\n                            Confirm\n                        </Button>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={toggleCallback}>\n                        Cancel\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    )\n}\n\nexport default ConfirmModal\n","/* eslint-disable no-underscore-dangle */\nimport React, { useState, FC, useCallback } from 'react'\nimport { FiPlusSquare } from 'react-icons/fi'\nimport { useForm, Resolver } from 'react-hook-form'\nimport CreateModal from '../CreateModal'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\nimport { createSubMenu } from '../../redux/slices/subMenu'\n\ntype TFormValues = { name: string }\n\nconst CreateSubMenuButton: FC = () => {\n    const [modal, setModal] = useState(false)\n    const dispatch = useAppDispatch()\n    const { classification } = useAppSelector((state) => state)\n\n    const resolver: Resolver<TFormValues> = async (values) => {\n        return {\n            values: values.name ? values : {},\n            errors: !values.name\n                ? {\n                      name: {\n                          type: 'required',\n                          message: 'New submenu name is required.',\n                      },\n                  }\n                : {},\n        }\n    }\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<TFormValues>({ resolver, mode: 'onChange' })\n\n    const toggle = useCallback(() => {\n        setModal(!modal)\n    }, [modal])\n\n    const onSubmit = (formValues: TFormValues) => {\n        const { name } = formValues\n        if (!errors.name) {\n            dispatch(\n                createSubMenu({\n                    classification: classification.selected._id,\n                    name,\n                })\n            )\n        }\n        toggle()\n    }\n\n    return (\n        <>\n            <button\n                style={{\n                    padding: '0',\n                    // marginLeft: '.5rem',\n                    // display: 'flex',\n                    position: 'relative',\n                    height: '2rem',\n                    width: '2rem',\n                    minHeight: 0,\n                }}\n                id=\"create-submenu-button\"\n                type=\"button\"\n                className=\"btn btn-outline-primary menu-button\"\n                onClick={toggle}\n            >\n                <big>\n                    <FiPlusSquare />\n                </big>\n            </button>\n            <CreateModal\n                actionText=\"Add Submenu\"\n                register={register}\n                onSubmit={onSubmit}\n                handleSubmit={handleSubmit}\n                setModal={modal}\n                toggleCallback={toggle}\n            />\n        </>\n    )\n}\n\nexport default CreateSubMenuButton\n","import { SubMenu, SidebarHeader } from 'react-pro-sidebar'\nimport React, { FC, useCallback, useRef, useEffect, useState } from 'react'\nimport { FiEdit3 } from 'react-icons/fi'\nimport { Link } from 'react-router-dom'\nimport { IClassification } from '../../schemas'\nimport SubMenuList from './SubMenuList'\nimport ItemList from './ItemList'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\nimport {\n    selectedClassification,\n    editingClassification,\n} from '../../redux/slices/classification'\nimport { editingSubMenu } from '../../redux/slices/subMenu'\nimport eventBus from '../../common/EventBus'\nimport { editingItems } from '../../redux/slices/item'\nimport CreateSubMenuButton from '../buttons/CreateSubMenuButton'\n\ninterface Props {\n    classification: IClassification\n}\nconst ClassificationItem: FC<Props> = ({ classification }) => {\n    const { _id, name, hasSubMenu, listItems, subMenus } = classification\n    const [width, setWidth] = useState('20rem')\n    const { showEdit } = useAppSelector((state) => state.auth)\n    const roles = useAppSelector((state) => state.auth.user?.roles)\n    const dispatch = useAppDispatch()\n    const ref = useRef(null)\n\n    const isClassification = (value: unknown): value is IClassification => {\n        return !!value && !!(value as IClassification)\n    }\n\n    const handleClassificationClick = useCallback(() => {\n        if (ref.current) {\n            if (isClassification(classification)) {\n                dispatch(selectedClassification(classification)).then(() => {\n                    eventBus.dispatch('updateItems')\n                })\n            }\n        }\n    }, [classification, dispatch])\n\n    const handleEditClick = useCallback(() => {\n        if (isClassification(classification)) {\n            dispatch(editingClassification(true))\n            dispatch(editingSubMenu(false))\n            dispatch(editingItems(false))\n            dispatch(selectedClassification(classification)).then(() => {\n                eventBus.dispatch('updateItems')\n            })\n        }\n    }, [classification, dispatch])\n\n    useEffect(() => {\n        if (showEdit) {\n            setWidth('17rem')\n        }\n    }, [showEdit])\n    return (\n        <>\n            <div key={`classification-item/${_id}`} style={{ display: 'flex' }}>\n                {roles && roles.includes('ROLE_ADMIN') && showEdit && (\n                    <button\n                        style={{ marginLeft: '.5ch' }}\n                        key={`edit-button${_id}`}\n                        type=\"button\"\n                        className=\"btn btn-outline-secondary menu-button\"\n                        onClick={handleEditClick}\n                    >\n                        <Link to={`/dashboard/admin/edit/${_id}`} />\n                        <small>\n                            <FiEdit3 />\n                        </small>\n                    </button>\n                )}\n                <SubMenu\n                    ref={ref}\n                    style={{\n                        width,\n                        fontWeight: 'bold',\n                        zIndex: 1,\n                        textTransform: 'uppercase',\n                        paddingLeft: 0,\n                    }}\n                    id={`sm-id${_id}`}\n                    key={`sm${_id}`}\n                    title={name}\n                    onClick={handleClassificationClick}\n                >\n                    {hasSubMenu &&\n                        Object.keys(classification.subMenus).length !== 0 && (\n                            <>\n                                {/* <SidebarHeader\n                                    style={{\n                                        borderRadius: '5px',\n                                        backgroundColor: '#D0D6DC',\n                                        lineHeight: '2rem',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                    }}\n                                > */}\n                                {roles &&\n                                    roles.includes('ROLE_ADMIN') &&\n                                    showEdit && <CreateSubMenuButton />}\n                                {/* <span\n                                    style={{\n                                        margin: '10px',\n                                        fontSize: '14px',\n                                    }}\n                                    className=\"span-text___italic\"\n                                >\n                                    Submenus{'  '}\n                                </span> */}\n                                {/* <Badge pill>\n                                    {Object.keys(subMenus).length}\n                                </Badge> */}\n                                {/* </SidebarHeader> */}\n                                <SubMenuList\n                                    key={`sm-list${_id}`}\n                                    subMenus={subMenus}\n                                />\n                            </>\n                        )}\n                    {listItems && classification.listItems.length !== 0 && (\n                        <>\n                            {/* <SidebarHeader\n                                style={{\n                                    backgroundColor: '#D0D6DC',\n                                    // margin: '10px',\n                                    lineHeight: '2rem',\n                                }}\n                            > */}\n                            {/* <span\n                                style={{\n                                    margin: '10px',\n                                    fontSize: '14px',\n                                }}\n                                className=\"span-text___italic\"\n                            >\n                                Scans{'  '}\n                            </span> */}\n                            {/* <Badge pill>{listItems.length}</Badge> */}\n                            {/* </SidebarHeader> */}\n                            <ItemList\n                                key={`item-list${_id}`}\n                                parentId={_id}\n                                listItems={listItems}\n                            />\n                        </>\n                    )}\n                </SubMenu>\n            </div>\n        </>\n    )\n}\n\nexport default ClassificationItem\n","import { useState, useCallback } from 'react'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { IClassification } from '../schemas'\nimport { getAllClassifications } from '../redux/slices/classification'\nimport { newError } from '../redux/slices/message'\n\ninterface Props {\n    classifications: IClassification[] | Record<string, unknown>\n    isLoading: boolean\n    error: null\n}\nconst useClassifications = (props: Props): [Props, () => void] => {\n    const { classifications, isLoading, error } = props\n    const subMenuLoading = useAppSelector((state) => state.subMenu.loading)\n    const { entities } = useAppSelector((state) => state.classification)\n    const dispatch = useAppDispatch()\n    const [attempted, setAttempted] = useState(false)\n    const [response, setResponse] = useState({\n        classifications,\n        isLoading,\n        error,\n    })\n\n    const isClassificationList = (\n        value: unknown\n    ): value is IClassification[] => {\n        return !!value && !!(value as IClassification[])\n    }\n    const getClassifications = useCallback(() => {\n        setResponse((prevState) => ({ ...prevState, isLoading: true }))\n        const classificationsCurrent: IClassification[] = entities\n        if (\n            classificationsCurrent !== undefined &&\n            classificationsCurrent.length !== 0\n        ) {\n            setResponse({\n                classifications: classificationsCurrent,\n                isLoading: false,\n                error: null,\n            })\n        } else if (\n            subMenuLoading !== 'pending' &&\n            entities !== undefined &&\n            entities.length === 0 &&\n            !attempted\n        ) {\n            setAttempted(true)\n            dispatch(getAllClassifications())\n                .then(unwrapResult)\n                .then((res: IClassification[]) => {\n                    if (isClassificationList(res)) {\n                        const classificationsFetched: IClassification[] = res\n                        if (classificationsFetched !== undefined) {\n                            setResponse({\n                                classifications: classificationsFetched,\n                                isLoading: false,\n                                error: null,\n                            })\n                        }\n                    }\n                })\n                .catch((err: Error) => {\n                    dispatch(newError(err.message))\n                    // return Promise.reject(err)\n                })\n        }\n    }, [dispatch, entities, subMenuLoading, attempted])\n    return [response, getClassifications]\n}\n\nexport default useClassifications\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable react/prop-types */\nimport React, { FC, useEffect } from 'react'\nimport { IClassification } from '../../schemas'\nimport ClassificationItem from './ClassificationItem'\nimport useClassifications from '../../hooks/useClassifications'\nimport { useAppSelector } from '../../redux/hooks'\n\nconst ClassificationList: FC = () => {\n    const { user, loading } = useAppSelector((state) => state.auth)\n    const [response, getClassifications] = useClassifications({\n        classifications: [],\n        isLoading: false,\n        error: null,\n    })\n    const { isLoading, classifications } = response\n\n    const isClassifications = (value: unknown): value is IClassification[] => {\n        return !!value && !!(value as IClassification[])\n    }\n\n    useEffect(() => {\n        if (loading === 'successful' && user.accessToken) getClassifications()\n    }, [getClassifications, loading, user])\n\n    const classificationListNode =\n        !isLoading &&\n        classifications !== undefined &&\n        isClassifications(classifications) &&\n        classifications.map((classification: IClassification) => {\n            return (\n                // <div id={`cl-wrapper-${classification._id}`}>\n                <ClassificationItem\n                    key={`cl-item-${classification._id}`}\n                    classification={classification}\n                />\n                // </div>\n            )\n        })\n\n    return <>{classificationListNode}</>\n}\n\nexport default ClassificationList\n","/* eslint-disable no-underscore-dangle */\nimport React, { useState, FC, useCallback } from 'react'\nimport { FiPlusSquare } from 'react-icons/fi'\nimport { useForm, Resolver } from 'react-hook-form'\nimport CreateModal from '../CreateModal'\nimport { useAppDispatch } from '../../redux/hooks'\nimport { createClassification } from '../../redux/slices/classification'\n\ntype TFormValues = { name: string }\n\nconst CreateClassificationButton: FC = () => {\n    const [modal, setModal] = useState(false)\n    const dispatch = useAppDispatch()\n\n    const resolver: Resolver<TFormValues> = async (values) => {\n        return {\n            values: values.name ? values : {},\n            errors: !values.name\n                ? {\n                      name: {\n                          type: 'required',\n                          message: 'New classification name is required.',\n                      },\n                  }\n                : {},\n        }\n    }\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<TFormValues>({ resolver, mode: 'onChange' })\n\n    const toggle = useCallback(() => {\n        setModal(!modal)\n    }, [modal])\n\n    const onSubmit = (formValues: TFormValues) => {\n        const { name } = formValues\n        if (!errors.name) {\n            dispatch(\n                createClassification({\n                    name,\n                })\n            )\n        }\n        toggle()\n    }\n\n    return (\n        <>\n            <button\n                style={{\n                    padding: '0',\n                    // marginLeft: '.5rem',\n                    // display: 'flex',\n                    position: 'relative',\n                    height: '2rem',\n                    width: '2rem',\n                    minHeight: 0,\n                }}\n                id=\"create-submenu-button\"\n                type=\"button\"\n                className=\"btn btn-outline-primary menu-button\"\n                onClick={toggle}\n            >\n                <big>\n                    <FiPlusSquare />\n                </big>\n            </button>\n            <CreateModal\n                actionText=\"Create new Classification\"\n                register={register}\n                onSubmit={onSubmit}\n                handleSubmit={handleSubmit}\n                setModal={modal}\n                toggleCallback={toggle}\n            />\n        </>\n    )\n}\n\nexport default CreateClassificationButton\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/prop-types */\n\nimport React, { FC } from 'react'\nimport {\n    ProSidebar,\n    Menu,\n    SidebarHeader,\n    SidebarContent,\n    SidebarFooter,\n} from 'react-pro-sidebar'\nimport ClassificationList from '../components/sidebar/ClassificationList'\nimport CreateClassificationButton from '../components/buttons/CreateClassificationButton'\nimport { useAppSelector } from '../redux/hooks'\n\nconst Sidebar: FC = () => {\n    const { showEdit } = useAppSelector((state) => state.auth)\n\n    return (\n        <div className=\"sidebar\">\n            <ProSidebar>\n                <div className=\"sidebar___header\">\n                    <SidebarHeader style={{ display: 'flex' }}>\n                        {showEdit && <CreateClassificationButton />}\n                        <p className=\"sidebar___header___text\">\n                            Classifications\n                        </p>\n                    </SidebarHeader>\n                </div>\n                <div className=\"sidebar___content\">\n                    <SidebarContent>\n                        <Menu iconShape=\"square\">\n                            <ClassificationList />\n                        </Menu>\n                    </SidebarContent>\n                </div>\n                <div className=\"sidebar___footer\">\n                    <SidebarFooter>\n                        <small>v0.6 {new Date().getFullYear()}</small>\n                    </SidebarFooter>\n                </div>\n            </ProSidebar>\n        </div>\n    )\n}\n\nexport default Sidebar\n","/* eslint-disable react/prop-types */\nimport React, { FC, lazy, Suspense } from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport SyncLoader from 'react-spinners/SyncLoader'\nimport { useAppSelector } from '../redux/hooks'\n\nconst Edit = lazy(() => import('../containers/Edit'))\nconst EditObject = lazy(() => import('../containers/EditObject'))\nconst VideoPlayer = lazy(() => import('../components/content/VideoPlayer'))\nconst Classification = lazy(() => import('../containers/Classification'))\nconst ContentHome = lazy(() => import('../components/content/ContentHome'))\nconst ProtectedRouteAdmin = lazy(() => import('./ProtectedRouteAdmin'))\n\ninterface Props {\n    routePath: string\n}\n\nconst ContentRoutes: FC<Props> = ({ routePath }) => {\n    const { roles } = useAppSelector((state) => state.auth.user)\n\n    const isAdmin = roles !== null && roles.includes('ROLE_ADMIN')\n    return (\n        <Suspense\n            fallback={\n                <div className=\"spinner\">\n                    <SyncLoader />\n                </div>\n            }\n        >\n            <Switch>\n                <Route\n                    path={`${routePath}/home`}\n                    exact\n                    component={ContentHome}\n                />\n                <Route\n                    path={`${routePath}/classification/:id`}\n                    component={Classification}\n                />\n                <ProtectedRouteAdmin\n                    isAuthenticated={isAdmin}\n                    path={`${routePath}/edit/:id`}\n                    authenticationPath={`${routePath}`}\n                    component={Edit}\n                />\n                <Route\n                    path=\"/dashboard/admin/move/:id\"\n                    component={EditObject}\n                />\n                <Route\n                    path={`${routePath}/video/:id`}\n                    component={VideoPlayer}\n                />\n                <Redirect\n                    from={`${routePath}`}\n                    to={`${routePath}/home`}\n                    exact\n                />\n            </Switch>\n        </Suspense>\n    )\n}\n\nexport default ContentRoutes\n","import React, { FC, useEffect, useState } from 'react'\nimport { Button } from 'reactstrap'\nimport { FiXSquare } from 'react-icons/fi'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport ContentRoutes from '../../routes/ContentRoutes'\nimport { useAppSelector } from '../../redux/hooks'\nimport { IAppUser } from '../../schemas'\n\nconst Content: FC = () => {\n    const { isAuth, user, contentPath } = useAppSelector((state) => state.auth)\n    const [routePath, setRoutePath] = useState('/dashboard')\n    const location = useLocation()\n    const history = useHistory()\n\n    const isUser = (value: unknown): value is IAppUser => {\n        return !!value && !!(value as IAppUser)\n    }\n    const isAdmin = isUser(user) && user.roles?.includes('ROLE_ADMIN')\n\n    useEffect(() => {\n        if (isAdmin) {\n            setRoutePath('/dashboard/admin')\n        }\n    }, [isAdmin])\n\n    return isAuth && contentPath ? (\n        <div className=\"content\">\n            {location.pathname !== `${contentPath}/home` && (\n                <Button\n                    style={{ position: 'absolute', zIndex: 1000 }}\n                    onClick={() => history.push(contentPath)}\n                >\n                    <big>\n                        <FiXSquare />\n                    </big>\n                </Button>\n            )}\n            <ContentRoutes routePath={routePath} />\n        </div>\n    ) : null\n}\nexport default Content\n","import React, { FC } from 'react'\n// import { MdCopyright } from 'react-icons/md';\n\nconst Footer: FC = () => (\n    <footer>\n        <small>\n            &copy; Copyright {new Date().getFullYear()}, Division of Emergency\n            Ultrasound\n        </small>\n    </footer>\n)\n\nexport default Footer\n","/* eslint-disable react/prop-types */\nimport React, { FC } from 'react'\n\ninterface Props {\n    email: string\n}\nconst UserInfoHeader: FC<Props> = ({ email }) => (\n    <div\n        style={{ fontSize: '1.35ch', color: '#6C757D' }}\n        className=\"form-group\"\n    >\n        {email}\n    </div>\n)\nexport default UserInfoHeader\n","import React, { FC } from 'react'\nimport {\n    Dropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n} from 'reactstrap'\n\ninterface Props {\n    dropDownOpen: boolean\n    dropDownToggle: () => void\n    databaseInitToggle: () => void\n    databaseUpdateToggle: () => void\n}\n\nconst DatabaseDropdown: FC<Props> = ({\n    dropDownOpen,\n    dropDownToggle,\n    databaseInitToggle,\n    databaseUpdateToggle,\n}) => {\n    return (\n        <Dropdown isOpen={dropDownOpen} toggle={dropDownToggle}>\n            <DropdownToggle caret>Dropdown</DropdownToggle>\n            <DropdownMenu container=\"body\">\n                <DropdownItem onClick={databaseInitToggle}>\n                    <span className=\"span-text\">Reset Database</span>\n                </DropdownItem>\n                <DropdownItem onClick={databaseUpdateToggle}>\n                    <span className=\"span-text\">Update Database</span>\n                </DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n    )\n}\n\nexport default DatabaseDropdown\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/prop-types */\nimport React, { FC, useEffect, useState, useCallback } from 'react'\nimport Switch from 'react-switch'\nimport { AxiosError, AxiosResponse } from 'axios'\nimport Logout from '../buttons/LogoutButton'\nimport UserInfoHeader from '../UserInfoHeader'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\nimport { importData, updateData } from '../../redux/slices/edit'\nimport { newError } from '../../redux/slices/message'\nimport { api } from '../../service/api'\nimport { IAppUser } from '../../schemas'\nimport { userRegister, showEditToggle } from '../../redux/slices/auth'\nimport WarningModal from '../WarningModal'\nimport DatabaseDropdown from '../DatabaseDropdown'\n\nconst Header: FC = () => {\n    const { auth } = useAppSelector((state) => state)\n    const { user, showEdit } = auth\n    const [content, setContent] = useState<string | null>(null)\n    const [initModal, setInitModal] = useState(false)\n    const [updateModal, setUpdateModal] = useState(false)\n    const [dropDownOpen, setDropdownOpen] = useState(false)\n    const [switchChecked, setSwitchChecked] = useState(false)\n    const isAdmin = user.roles?.includes('ROLE_ADMIN')\n    const dispatch = useAppDispatch()\n    const isUser = (value: unknown): value is IAppUser => {\n        return !!value && !!(value as IAppUser)\n    }\n    const handleSwitchChange = () => {\n        dispatch(showEditToggle())\n        setSwitchChecked(!switchChecked)\n    }\n    const dropDownToggle = () => setDropdownOpen(!dropDownOpen)\n\n    const databaseInitToggle = useCallback(() => {\n        setInitModal(!initModal)\n    }, [initModal])\n\n    const databaseUpdateToggle = useCallback(() => {\n        setUpdateModal(!updateModal)\n    }, [updateModal])\n\n    const handleDatabaseInit = () => {\n        dispatch(importData()).catch((res: AxiosResponse<AxiosError>) => {\n            dispatch(newError(res.data.message))\n        })\n        databaseInitToggle()\n    }\n    const handleDatabaseUpdate = () => {\n        dispatch(updateData())\n        databaseUpdateToggle()\n    }\n    useEffect(() => {\n        const getDate = async () => {\n            const date = await api.get(`date`)\n            setContent(date.data)\n        }\n        getDate()\n    }, [])\n\n    useEffect(() => {\n        if (switchChecked !== showEdit) {\n            setSwitchChecked(showEdit)\n        }\n    }, [switchChecked, showEdit])\n\n    return (\n        <>\n            <header style={{ zIndex: 10 }}>\n                <div className=\"button-wrapper\">\n                    <div className=\"date\">{content}</div>\n                    {isAdmin && showEdit && (\n                        <div\n                            className=\"form-group\"\n                            style={{ marginLeft: '1rem' }}\n                        >\n                            <DatabaseDropdown\n                                dropDownOpen={dropDownOpen}\n                                dropDownToggle={dropDownToggle}\n                                databaseInitToggle={databaseInitToggle}\n                                databaseUpdateToggle={databaseUpdateToggle}\n                            />\n                        </div>\n                    )}\n\n                    <Logout />\n                    {user.email && isUser(userRegister) && (\n                        <UserInfoHeader email={user.email} />\n                    )}\n                    {isAdmin && (\n                        <div\n                            style={{\n                                position: 'absolute',\n                                left: '1rem',\n                            }}\n                        >\n                            <label>\n                                <Switch\n                                    height={14}\n                                    width={28}\n                                    handleDiameter={12}\n                                    onChange={handleSwitchChange}\n                                    checked={switchChecked}\n                                />\n                            </label>\n                        </div>\n                    )}\n                    {/* <SearchBar /> */}\n                </div>\n            </header>\n            <WarningModal\n                actionText=\"Reset the \"\n                itemText=\"database\"\n                setModal={initModal}\n                toggleCallback={databaseInitToggle}\n                modalAction={handleDatabaseInit}\n            />\n            <WarningModal\n                actionText=\"Update the \"\n                itemText=\"database\"\n                setModal={updateModal}\n                toggleCallback={databaseUpdateToggle}\n                modalAction={handleDatabaseUpdate}\n            />\n        </>\n    )\n}\n\nexport default Header\n","/* eslint-disable react/prop-types */\nimport React, { FC } from 'react'\nimport Content from '../content/Content'\nimport Footer from './Footer'\nimport Header from './Header'\n\nconst Body: FC = () => {\n    return (\n        <div className=\"body\">\n            <Header />\n            <Content />\n            <Footer />\n        </div>\n    )\n}\n\nexport default Body\n","import React, { useEffect } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useAppSelector } from '../redux/hooks'\nimport Sidebar from './Sidebar'\nimport Body from '../components/layout/Body'\nimport EventBus from '../common/EventBus'\n\nconst Dashboard = () => {\n    const { isAuth } = useAppSelector((state) => state.auth)\n\n    useEffect(() => {\n        if (!isAuth) {\n            EventBus.dispatch('logout')\n        }\n    }, [isAuth])\n\n    return (\n        <div style={{ boxSizing: 'border-box', minHeight: '100vh' }}>\n            <Sidebar />\n            <Body />\n        </div>\n    )\n}\nexport default withRouter(Dashboard)\n"],"sourceRoot":""}