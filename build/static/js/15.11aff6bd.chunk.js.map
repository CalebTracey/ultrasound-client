{"version":3,"sources":["components/buttons/DetailsPopoverButton.tsx","components/buttons/VideoDeleteButton.tsx","components/content/VideoPlayer.tsx"],"names":["DetailsPopover","item","useState","popoverOpen","setPopOverOpen","toggle","prevState","id","type","className","onClick","Popover","placement","isOpen","target","PopoverHeader","name","PopoverBody","style","display","whiteSpace","patientId","link","VideoDeleteButton","modal","setModal","useAppSelector","state","selected","itemType","parentId","subMenu","auth","dispatch","useAppDispatch","history","useHistory","contentPath","useCallback","handleDelete","value","undefined","deleteItem","itemList","length","deleteData","push","WarningModal","actionText","itemText","toggleCallback","modalAction","VideoPlayer","url","editing","isAdmin","user","roles","includes","isUrl","isItemList","showEdit","DetailsPopoverButton","title","volume","muted","playing","loop","width","height","controls","onError","newError"],"mappings":"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","file":"static/js/15.11aff6bd.chunk.js","sourcesContent":["import React, { FC, useState } from 'react'\nimport { Popover, PopoverHeader, PopoverBody } from 'reactstrap'\nimport { FiInfo } from 'react-icons/fi'\nimport { IListItem } from '../../schemas'\n\ninterface Props {\n    item: IListItem\n}\n\nconst DetailsPopover: FC<Props> = ({ item }) => {\n    const [popoverOpen, setPopOverOpen] = useState(false)\n\n    const toggle = () => setPopOverOpen((prevState) => !prevState)\n\n    return (\n        <>\n            <button\n                id=\"info\"\n                type=\"button\"\n                className=\"btn btn-outline-secondary menu-button\"\n                onClick={toggle}\n            >\n                <big>\n                    <FiInfo />\n                </big>\n            </button>\n            <Popover\n                placement=\"bottom\"\n                isOpen={popoverOpen}\n                target=\"info\"\n                toggle={toggle}\n            >\n                <PopoverHeader>\n                    <span className=\"span-header___capital\">{item.name}</span>\n                </PopoverHeader>\n                <PopoverBody>\n                    <p style={{ display: 'flex', whiteSpace: 'break-spaces' }}>\n                        <span className=\"span-text___bold\">\n                            Patient Id: <br />\n                        </span>\n\n                        <span className=\"span-text___light\">\n                            {item.patientId}\n                        </span>\n                    </p>\n                    <span className=\"span-text___bold\">\n                        File name: <br />\n                    </span>\n                    <p className=\"span-text___light\">{item.link}</p>\n                </PopoverBody>\n            </Popover>\n        </>\n    )\n}\n\nexport default DetailsPopover\n","import React, { useState, FC, useCallback } from 'react'\nimport { FiTrash2 } from 'react-icons/fi'\nimport { useHistory } from 'react-router-dom'\nimport { IListItem } from '../../schemas'\nimport WarningModal from '../WarningModal'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\nimport { deleteItem, deleteData } from '../../redux/slices/edit'\n\nconst VideoDeleteButton: FC = () => {\n    const [modal, setModal] = useState(false)\n    const { selected, itemType, parentId } = useAppSelector(\n        (state) => state.item\n    )\n    const { subMenu, auth } = useAppSelector((state) => state)\n    const { name, link } = selected\n    const dispatch = useAppDispatch()\n    const history = useHistory()\n\n    const isItem = (value: unknown): value is IListItem => {\n        return !!value && !!(value as IListItem)\n    }\n\n    const { contentPath } = auth\n    const toggle = useCallback(() => {\n        setModal(!modal)\n    }, [modal])\n\n    const handleDelete = useCallback(() => {\n        if (selected !== undefined && parentId && isItem(selected)) {\n            if (link && name) {\n                dispatch(\n                    deleteItem({\n                        id: parentId,\n                        type: itemType,\n                        item: selected,\n                    })\n                )\n                if (\n                    selected.type === 'subMenu' &&\n                    subMenu.selected.itemList.length === 1\n                ) {\n                    dispatch(deleteData({ id: parentId, type: itemType }))\n                }\n            }\n        }\n        if (contentPath) {\n            history.push(contentPath)\n        }\n        // handleClassificationReset()\n    }, [\n        contentPath,\n        dispatch,\n        history,\n        itemType,\n        link,\n        name,\n        parentId,\n        selected,\n        subMenu,\n    ])\n\n    return (\n        <>\n            <button\n                id=\"video-delete-button\"\n                type=\"button\"\n                className=\"btn btn-outline-danger menu-button\"\n                onClick={toggle}\n            >\n                <big>\n                    <FiTrash2 />\n                </big>\n            </button>\n            <WarningModal\n                actionText=\"Permanently delete\"\n                itemText={name}\n                setModal={modal}\n                toggleCallback={toggle}\n                modalAction={handleDelete}\n            />\n        </>\n    )\n}\n\nexport default VideoDeleteButton\n","/* eslint-disable react/prop-types */\nimport React, { FC } from 'react'\nimport ReactPlayer from 'react-player'\nimport SyncLoader from 'react-spinners/SyncLoader'\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks'\nimport DetailsPopoverButton from '../buttons/DetailsPopoverButton'\nimport { IListItem, IAppUser } from '../../schemas'\nimport { newError } from '../../redux/slices/message'\nimport VideoDeleteButton from '../buttons/VideoDeleteButton'\n\nconst VideoPlayer: FC = () => {\n    const { auth } = useAppSelector((state) => state)\n    const { parentId, url, selected, editing } = useAppSelector(\n        (state) => state.item\n    )\n    const dispatch = useAppDispatch()\n    const isUrl = (value: unknown): value is string => {\n        return !!value && !!(value as string)\n    }\n    const isItemList = (value: unknown): value is IListItem => {\n        return !!value && !!(value as IListItem)\n    }\n    const isUser = (value: unknown): value is IAppUser => {\n        return !!value && !!(value as IAppUser)\n    }\n    const isAdmin = isUser(auth.user) && auth.user.roles?.includes('ROLE_ADMIN')\n\n    return isUrl(url) ? (\n        <div className=\"video-page\">\n            <div className=\"video-page___header\">\n                {isAdmin && isItemList(selected) && parentId && (\n                    <>\n                        {auth.showEdit && <VideoDeleteButton />}\n                        <DetailsPopoverButton item={selected} />\n                    </>\n                )}\n\n                <h2 className=\"video-page___title\">\n                    {!editing && selected.title}\n                </h2>\n            </div>\n            {/* {ReactPlayer.canPlay(url) ? ( */}\n            <div className=\"player\">\n                <ReactPlayer\n                    className=\"react-player\"\n                    url={url}\n                    volume={0}\n                    muted\n                    playing\n                    loop\n                    width=\"85%\"\n                    height=\"85%\"\n                    controls\n                    onError={() =>\n                        dispatch(newError('Error playing scan file'))\n                    }\n                />\n            </div>\n            {/* ) : (\n                dispatch(newError('Error playing scan file'))\n            )} */}\n        </div>\n    ) : (\n        <div className=\"spinner\">\n            <SyncLoader />\n        </div>\n    )\n}\nexport default VideoPlayer\n"],"sourceRoot":""}