{"version":3,"sources":["components/login/LoginButton.tsx","components/buttons/HomeButton.tsx","components/register/RegisterForm.tsx","containers/Register.tsx"],"names":["LoginButton","to","className","style","marginLeft","type","HomeButton","RegisterForm","isLoading","successful","onSubmit","errors","register","handleSubmit","message","reset","id","htmlFor","defaultValue","fullName","username","email","password","confirmPassword","acceptTerms","disabled","onClick","marginTop","role","Register","useState","setIsLoading","setSuccessful","useAppSelector","state","auth","error","dispatch","useAppDispatch","validationSchema","Yup","shape","required","min","max","oneOf","useForm","resolver","yupResolver","formState","data","userRegister","then","catch"],"mappings":"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","file":"static/js/10.7cec48e8.chunk.js","sourcesContent":["import React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\n\nconst LoginButton: FC = () => (\n    <Link to=\"/login\">\n        <div className=\"form-group\" style={{ marginLeft: '1rem' }}>\n            <button type=\"button\" className=\"btn btn-outline-primary\">\n                Log in\n            </button>\n        </div>\n    </Link>\n)\n\nexport default LoginButton\n","import React, { FC } from 'react'\nimport { Link } from 'react-router-dom'\n\nconst HomeButton: FC = () => (\n    <Link to=\"/home\">\n        <div className=\"form-group\" style={{ marginLeft: '1rem' }}>\n            <button type=\"button\" className=\"btn btn-outline-primary\">\n                Home\n            </button>\n        </div>\n    </Link>\n)\n\nexport default HomeButton\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC } from 'react'\nimport {\n    UseFormRegister,\n    UseFormHandleSubmit,\n    SubmitHandler,\n    FieldErrors,\n    UseFormReset,\n} from 'react-hook-form'\n\ntype TFormValues = {\n    fullName: string\n    username: string\n    email: string\n    password: string\n    confirmPassword: string\n    acceptTerms: boolean\n}\ninterface Props {\n    isLoading: boolean\n    successful: boolean\n    message: string | null\n    onSubmit: SubmitHandler<TFormValues>\n    errors: FieldErrors<TFormValues>\n    register: UseFormRegister<TFormValues>\n    handleSubmit: UseFormHandleSubmit<TFormValues>\n    reset: UseFormReset<TFormValues>\n}\nconst RegisterForm: FC<Props> = ({\n    isLoading,\n    successful,\n    onSubmit,\n    errors,\n    register,\n    handleSubmit,\n    message,\n    reset,\n}) => (\n    <div className=\"form\">\n        <span>\n            <h4>Register</h4>\n        </span>\n        <div id=\"signup\" className=\"register-form\">\n            <form id=\"signup\" onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"fullName\">\n                        Full Name\n                        <input\n                            defaultValue=\"\"\n                            type=\"text\"\n                            {...register('fullName')}\n                            className={`form-control ${\n                                errors.fullName ? 'is-invalid' : ''\n                            }`}\n                        />\n                        <div className=\"invalid-feedback\">\n                            {errors.fullName?.message}\n                        </div>\n                    </label>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"username\">\n                        Username\n                        <input\n                            defaultValue=\"\"\n                            type=\"text\"\n                            {...register('username')}\n                            className={`form-control ${\n                                errors.username ? 'is-invalid' : ''\n                            }`}\n                        />\n                        <div className=\"invalid-feedback\">\n                            {errors.username?.message}\n                        </div>\n                    </label>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">\n                        Email\n                        <input\n                            defaultValue=\"\"\n                            type=\"email\"\n                            {...register('email')}\n                            className={`form-control ${\n                                errors.email ? 'is-invalid' : ''\n                            }`}\n                        />\n                        <div className=\"invalid-feedback\">\n                            {errors.email?.message}\n                        </div>\n                    </label>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\">\n                        Password\n                        <input\n                            defaultValue=\"\"\n                            type=\"password\"\n                            {...register('password')}\n                            className={`form-control ${\n                                errors.password ? 'is-invalid' : ''\n                            }`}\n                        />\n                        <div className=\"invalid-feedback\">\n                            {errors.password?.message}\n                        </div>\n                    </label>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"confirmPassword\">\n                        Confirm Password\n                        <input\n                            defaultValue=\"\"\n                            type=\"password\"\n                            {...register('confirmPassword')}\n                            className={`form-control ${\n                                errors.confirmPassword ? 'is-invalid' : ''\n                            }`}\n                        />\n                        <div className=\"invalid-feedback\">\n                            {errors.confirmPassword?.message}\n                        </div>\n                    </label>\n                </div>\n\n                <div className=\"form-group form-check\">\n                    <input\n                        type=\"checkbox\"\n                        {...register('acceptTerms')}\n                        className={`form-check-input ${\n                            errors.acceptTerms ? 'is-invalid' : ''\n                        }`}\n                    />\n                    <span className=\"form-check-label\">\n                        I have read and agree to the Terms\n                    </span>\n                    <div className=\"invalid-feedback\">\n                        {errors.acceptTerms?.message}\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary btn-block\"\n                        disabled={isLoading}\n                    >\n                        {isLoading && (\n                            <span className=\"spinner-border spinner-border-sm\" />\n                        )}\n                        <span>Register</span>\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={() => reset()}\n                        className=\"btn btn-warning float-right\"\n                        style={{ marginTop: '2rem' }}\n                    >\n                        <span>Reset</span>\n                    </button>\n                </div>\n                {message && (\n                    <div className=\"form-group\">\n                        <div\n                            className={\n                                successful\n                                    ? 'alert alert-success'\n                                    : 'alert alert-danger'\n                            }\n                            role=\"alert\"\n                        >\n                            {message}\n                        </div>\n                    </div>\n                )}\n            </form>\n        </div>\n    </div>\n)\nexport default RegisterForm\n","import React, { useState, FC } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport * as Yup from 'yup'\nimport RegisterForm from '../components/register/RegisterForm'\nimport LoginButton from '../components/login/LoginButton'\nimport HomeButton from '../components/buttons/HomeButton'\nimport { userRegister } from '../redux/slices/auth'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\n\ntype TFormValues = {\n    fullName: string\n    username: string\n    email: string\n    password: string\n    confirmPassword: string\n    acceptTerms: boolean\n}\n\nconst Register: FC = () => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [successful, setSuccessful] = useState(false)\n    const message = useAppSelector((state) => {\n        return state.auth.error || ''\n    })\n    const dispatch = useAppDispatch()\n\n    const validationSchema = Yup.object().shape({\n        fullName: Yup.string().required('Fullname is required'),\n        username: Yup.string()\n            .required('Username is required')\n            .min(6, 'Username must be at least 6 characters')\n            .max(20, 'Username must not exceed 20 characters'),\n        email: Yup.string()\n            .required('Email is required')\n            .email('Email is invalid'),\n        password: Yup.string()\n            .required('Password is required')\n            .min(6, 'Password must be at least 6 characters')\n            .max(40, 'Password must not exceed 40 characters'),\n        confirmPassword: Yup.string()\n            .required('Confirm Password is required')\n            .oneOf(\n                [Yup.ref('password'), null],\n                'Confirm Password does not match'\n            ),\n        acceptTerms: Yup.bool().oneOf([true], 'Accept Terms is required'),\n    })\n\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: { errors },\n    } = useForm<TFormValues>({\n        resolver: yupResolver(validationSchema),\n    })\n\n    const onSubmit = (data: TFormValues) => {\n        setIsLoading(true)\n        dispatch(userRegister(data))\n            .then(() => {\n                setIsLoading(false)\n                setSuccessful(true)\n            })\n            .catch(() => {\n                setIsLoading(false)\n                setSuccessful(false)\n            })\n    }\n    return (\n        <>\n            <div className=\"button-wrapper\">\n                <LoginButton />\n                <HomeButton />\n            </div>\n            <RegisterForm\n                isLoading={isLoading}\n                successful={successful}\n                message={message}\n                onSubmit={onSubmit}\n                errors={errors}\n                register={register}\n                handleSubmit={handleSubmit}\n                reset={reset}\n            />\n        </>\n    )\n}\nexport default Register\n"],"sourceRoot":""}