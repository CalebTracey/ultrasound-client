{"version":3,"sources":["common/EventBus.tsx","style-fonts/Open_Sans/static/OpenSans/OpenSans-Regular.ttf","style-fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf","style-fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf","style-fonts/Roboto_Condensed/RobotoCondensed-Regular.ttf","style-fonts/Roboto_Slab/static/RobotoSlab-Regular.ttf","style-fonts/Roboto_Slab/static/RobotoSlab-Bold.ttf","style-fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf","style-fonts/Roboto_Slab/static/RobotoSlab-SemiBold.ttf","registerServiceWorker.js","redux/store.tsx","hooks/useItems.tsx","routes/Routes.tsx","containers/RoutesContainer.tsx","App.tsx","index.tsx","redux/slices/message.tsx","service/user-service.tsx","redux/slices/item.tsx","service/token-service.tsx","redux/slices/subMenu.tsx","service/auth-service.tsx","redux/slices/auth.tsx","redux/slices/classification.tsx","hooks/useSubMenu.tsx","service/api.tsx","redux/hooks.tsx"],"names":["eventBus","on","event","ac","callback","document","addEventListener","e","signal","dispatch","data","dispatchEvent","CustomEvent","detail","remove","removeEventListener","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","store","configureStore","reducer","auth","item","message","subMenu","classification","middleware","getDefaultMiddleware","useItems","props","list","parentId","isLoading","useAppSelector","useState","response","setResponse","isClassificationEditing","editing","isSubMenuEditing","classificationItems","selected","listItems","subMenuItems","itemList","useAppDispatch","isItemList","value","useCallback","AbortController","dispatchSelection","id","listSelection","selectionType","a","selectedItemList","itemType","prevState","loading","_id","abort","Dashboard","lazy","Home","Login","ProtectedRoute","Register","Routes","isAuth","user","isAdmin","roles","includes","fallback","className","exact","path","component","isAuthenticated","authenticationPath","RoutesContainer","text","messageState","setMessageState","errorState","setErrorState","notification","setNotification","messageToggle","errorToggle","useEffect","timer","setTimeout","clearMessage","clearTimeout","UncontrolledAlert","style","display","zIndex","top","textAlign","isOpen","toggle","color","App","contentPath","subId","setSubId","subMenuSelectedId","history","useHistory","useLocation","isUser","itemResponse","getItems","useSubMenu","subMenuObj","subMenuResponse","getSubMenu","pathname","logOut","logout","push","defineContentPath","ReactDOM","render","basename","process","querySelector","URL","origin","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","newError","createAsyncThunk","newMessage","messageSlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","action","payload","getDate","api","getClassifications","getUrl","link","UserService","getAdminContent","getSubMenuObj","getLinkUrl","itemSlice","listMap","url","size","hasItems","itemLoading","length","resetItemSelection","editingItems","currentSize","selectedItem","removeItem","filter","pending","actions","TokenService","getLocalRefreshToken","userStorage","localStorage","getItem","JSON","parse","refreshToken","getLocalAccessToken","accessToken","setUser","setItem","stringify","removeUser","selectedSubMenu","thunkApi","getOne","res","createSubMenu","post","getOneClassification","subMenuSlice","oldParentId","newParentId","subMenuList","itemCount","subMenuLoading","resetSubMenuSelection","editingSubMenu","removeListItem","undefined","AuthService","userDetails","username","registerService","loginService","details","logoutService","initialAuthState","showEdit","login","credentials","userRegister","regCredentials","authSlice","userData","registerSuccess","registerFail","userRefreshToken","token","showEditToggle","currentState","rejected","getAllClassifications","_","Promise","resolve","reject","err","isAxiosError","selectedClassification","createClassification","classificationSlice","entities","subMenuCount","listItemsCount","editingClassification","resetClassificationSelection","setClassifications","classifications","Array","from","Object","keys","subMenus","subMenuListState","loadingState","isSubMenuObj","subMenuCurrent","unwrapResult","StatusCode","injectToken","config","Authorization","EventBus","instance","this","initHttp","http","axios","create","baseURL","withCredentials","interceptors","request","use","handleError","put","delete","InternalServerError","Forbidden","Unauthorized","useDispatch","useSelector"],"mappings":"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","file":"static/js/main.729969ef.chunk.js","sourcesContent":["/* eslint-disable no-undef */\n\nconst on = (\n    event: string,\n    ac: AbortController,\n    callback: { (): void; (arg: Event): void }\n): void => {\n    document.addEventListener(event, (e) => callback(e), {\n        signal: ac.signal,\n    })\n}\nconst dispatch = (event: string, data?: any): void => {\n    document.dispatchEvent(new CustomEvent(event, { detail: data }))\n}\nconst remove = (\n    event: string,\n    callback: EventListenerOrEventListenerObject\n): void => {\n    document.removeEventListener(event, callback)\n}\n\nconst eventBus = { on, dispatch, remove }\nexport default eventBus\n","export default __webpack_public_path__ + \"static/media/OpenSans-Regular.ca49d2b0.ttf\";","export default __webpack_public_path__ + \"static/media/OpenSans-Bold.0a80ea3f.ttf\";","export default __webpack_public_path__ + \"static/media/OpenSans-SemiBold.d8e49ca1.ttf\";","export default __webpack_public_path__ + \"static/media/RobotoCondensed-Regular.db6d9169.ttf\";","export default __webpack_public_path__ + \"static/media/RobotoSlab-Regular.a36eb364.ttf\";","export default __webpack_public_path__ + \"static/media/RobotoSlab-Bold.c45cfba4.ttf\";","export default __webpack_public_path__ + \"static/media/OpenSans-Italic.dcb5386a.ttf\";","export default __webpack_public_path__ + \"static/media/RobotoSlab-SemiBold.edc7d6de.ttf\";","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-param-reassign */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    )\n                })\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                'New content is available; please refresh.'\n                            )\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","/* eslint-disable import/no-cycle */\n/* eslint-disable import/no-extraneous-dependencies */\nimport { configureStore } from '@reduxjs/toolkit'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction, Store } from 'redux'\nimport auth from './slices/auth'\nimport item from './slices/item'\nimport classification from './slices/classification'\nimport subMenu from './slices/subMenu'\nimport message from './slices/message'\n\nconst store = configureStore({\n    reducer: {\n        auth,\n        item,\n        message,\n        subMenu,\n        classification,\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware(),\n})\nexport default store\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport type TDispatch = ThunkDispatch<RootState, void, AnyAction>\nexport type TStore = Store<RootState, AnyAction> & { dispatch: TDispatch }\nexport type TGetState = () => RootState\n","/* eslint-disable no-underscore-dangle */\nimport { useState, useCallback } from 'react'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\nimport { IListItem } from '../schemas'\nimport { selectedItemList } from '../redux/slices/item'\n\ninterface Props {\n    parentId: string\n    list: IListItem[] | Record<string, unknown>\n    isLoading: boolean\n    error: null\n}\n\nconst useItems = (props: Props): [Props, () => void] => {\n    const { list, parentId, isLoading, error } = props\n    const { subMenu } = useAppSelector((state) => state)\n    const { classification } = useAppSelector((state) => state)\n    const [response, setResponse] = useState({\n        parentId,\n        list,\n        isLoading,\n        error,\n    })\n    const isClassificationEditing = classification.editing\n    const isSubMenuEditing = subMenu.editing\n    const classificationItems = classification.selected.listItems\n    const subMenuItems = subMenu.itemList\n    const dispatch = useAppDispatch()\n\n    const isItemList = (value: unknown): value is IListItem[] => {\n        return !!value && !!(value as IListItem[])\n    }\n\n    const getItems = useCallback(() => {\n        const ac = new AbortController()\n        const dispatchSelection = async (\n            id: string,\n            listSelection: IListItem[],\n            selectionType: 'classification' | 'subMenu'\n        ) => {\n            dispatch(\n                selectedItemList({\n                    parentId: id,\n                    list: listSelection,\n                    itemType: selectionType,\n                })\n            )\n        }\n\n        setResponse((prevState) => ({ ...prevState, isLoading: true }))\n\n        if (\n            subMenu.loading !== 'pending' &&\n            isSubMenuEditing &&\n            isItemList(subMenuItems)\n        ) {\n            dispatchSelection(\n                subMenu.selected._id,\n                subMenuItems,\n                'subMenu'\n            ).then(() => {\n                setResponse({\n                    parentId: subMenu.selected._id,\n                    list: subMenuItems,\n                    isLoading: false,\n                    error: null,\n                })\n            })\n        } else if (\n            subMenu.loading !== 'pending' &&\n            isClassificationEditing &&\n            !isSubMenuEditing &&\n            isItemList(classificationItems)\n        ) {\n            dispatchSelection(\n                classification.selected._id,\n                classificationItems,\n                'classification'\n            ).then(() => {\n                setResponse({\n                    parentId: classification.selected._id,\n                    list: classificationItems,\n                    isLoading: false,\n                    error: null,\n                })\n            })\n        }\n\n        return () => ac.abort()\n    }, [\n        classification,\n        subMenu,\n        isSubMenuEditing,\n        isClassificationEditing,\n        classificationItems,\n        subMenuItems,\n        dispatch,\n    ])\n    return [response, getItems]\n}\n\nexport default useItems\n","import React, { FC, lazy, Suspense } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport SyncLoader from 'react-spinners/SyncLoader'\nimport { IAppUser } from '../schemas'\n// import Dashboard from '../containers/Dashboard'\nimport { useAppSelector } from '../redux/hooks'\n\nconst Dashboard = lazy(() => import('../containers/Dashboard'))\nconst Home = lazy(() => import('../containers/Home'))\nconst Login = lazy(() => import('../containers/Login'))\nconst ProtectedRoute = lazy(() => import('./ProtectedRoute'))\nconst Register = lazy(() => import('../containers/Register'))\nconst Routes: FC = () => {\n    const { isAuth, user } = useAppSelector((state) => state.auth)\n\n    const isUser = (value: unknown): value is IAppUser => {\n        return !!value && !!(value as IAppUser)\n    }\n    const isAdmin = isUser(user) && user.roles?.includes('ROLE_ADMIN')\n\n    return (\n        <Suspense\n            fallback={\n                <div className=\"spinner\">\n                    <SyncLoader />\n                </div>\n            }\n        >\n            <Route exact path={['/', '/home']} component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Switch>\n                <ProtectedRoute\n                    isAuthenticated={isAuth}\n                    path=\"/dashboard\"\n                    authenticationPath=\"/login\"\n                    component={Dashboard}\n                />\n                <ProtectedRoute\n                    isAuthenticated={isAdmin}\n                    path=\"/admin/dashboard\"\n                    authenticationPath=\"/login\"\n                    component={Dashboard}\n                />\n                )\n            </Switch>\n        </Suspense>\n    )\n}\n\nexport default Routes\n","import React, { useState, useEffect, useCallback, FC } from 'react'\nimport { UncontrolledAlert } from 'reactstrap'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\nimport { clearMessage } from '../redux/slices/message'\nimport Routes from '../routes/Routes'\n\nconst RoutesContainer: FC = () => {\n    const { text, error } = useAppSelector((state) => state.message)\n    const [messageState, setMessageState] = useState(false)\n    const [errorState, setErrorState] = useState(false)\n    const [notification, setNotification] = useState(false)\n    const dispatch = useAppDispatch()\n\n    const messageToggle = useCallback(() => {\n        setMessageState(!messageState)\n    }, [messageState])\n    const errorToggle = useCallback(() => {\n        setErrorState(!errorState)\n    }, [errorState])\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            if (messageState) {\n                dispatch(clearMessage()).then(() => {\n                    setNotification(false)\n                    messageToggle()\n                })\n            }\n            if (errorState) {\n                dispatch(clearMessage()).then(() => {\n                    setNotification(false)\n                    errorToggle()\n                })\n            }\n        }, 4000)\n        return () => clearTimeout(timer)\n    }, [messageToggle, errorToggle, dispatch, messageState, errorState])\n\n    useEffect(() => {\n        // const ac = new AbortController()\n        if (text && !error && !notification) {\n            setNotification(true)\n            messageToggle()\n        }\n        if (text && error && !notification) {\n            setNotification(true)\n            errorToggle()\n        }\n        // return () => ac.abort()\n    }, [text, error, notification, errorToggle, messageToggle])\n    return (\n        <>\n            <UncontrolledAlert\n                style={{\n                    display: 'relative',\n                    zIndex: 100,\n                    top: 0,\n                    textAlign: 'center',\n                }}\n                isOpen={messageState}\n                toggle={messageToggle}\n                color=\"info\"\n            >\n                <span className=\"span-text___Bold\"> {text} </span>\n            </UncontrolledAlert>\n\n            <UncontrolledAlert\n                style={{\n                    display: 'relative',\n                    zIndex: 100,\n                    top: 0,\n                    textAlign: 'center',\n                }}\n                isOpen={errorState}\n                toggle={errorToggle}\n                color=\"danger\"\n            >\n                <span className=\"span-text___Bold\"> {text} </span>\n            </UncontrolledAlert>\n            <Routes />\n        </>\n    )\n}\n\nexport default RoutesContainer\n","/* eslint-disable no-underscore-dangle */\nimport React, { FC, useEffect, useCallback, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useAppSelector, useAppDispatch } from './redux/hooks'\nimport eventBus from './common/EventBus'\nimport './styles.scss'\nimport { logout, defineContentPath } from './redux/slices/auth'\nimport useItems from './hooks/useItems'\nimport { clearMessage } from './redux/slices/message'\nimport { IAppUser } from './schemas'\nimport useSubMenu from './hooks/useSubMenu'\nimport RoutesContainer from './containers/RoutesContainer'\n\nconst App: FC = () => {\n    const { isAuth, loading, user, contentPath } = useAppSelector(\n        (state) => state.auth\n    )\n    const [subId, setSubId] = useState('')\n    const subMenuSelectedId = useAppSelector(\n        (state) => state.subMenu.selected._id\n    )\n    const dispatch = useAppDispatch()\n    const history = useHistory()\n    const location = useLocation()\n\n    const isUser = (value: unknown): value is IAppUser => {\n        return !!value && !!(value as IAppUser)\n    }\n    const isContentPath = (value: unknown): value is string => {\n        return !!value && !!(value as string)\n    }\n    const isString = (value: unknown): value is string => {\n        return !!value && !!(value as string)\n    }\n    const [itemResponse, getItems] = useItems({\n        parentId: '',\n        list: [],\n        isLoading: false,\n        error: null,\n    })\n    const [subMenuResponse, getSubMenu] = useSubMenu({\n        id: subId,\n        subMenuObj: {},\n        isLoading: false,\n        error: null,\n    })\n\n    useEffect(() => {\n        if (isString(subMenuSelectedId)) {\n            setSubId(subMenuSelectedId)\n        }\n    }, [subMenuSelectedId])\n\n    useEffect(() => {\n        dispatch(clearMessage())\n    }, [location.pathname, dispatch])\n\n    const logOut = useCallback(() => {\n        dispatch(logout())\n    }, [dispatch])\n\n    useEffect(() => {\n        const ac = new AbortController()\n        eventBus.on('logout', ac, () => {\n            logOut()\n            history.push('/home')\n        })\n        return () => {\n            ac.abort()\n            eventBus.remove('logout', logOut)\n        }\n    }, [dispatch, logOut, history])\n\n    useEffect(() => {\n        if (\n            isAuth &&\n            isUser(user) &&\n            loading === 'successful' &&\n            isContentPath(contentPath)\n        ) {\n            history.push(contentPath)\n        }\n        if (isUser(user)) {\n            dispatch(defineContentPath(user))\n        }\n    }, [dispatch, history, isAuth, loading, contentPath, user])\n\n    useEffect(() => {\n        const ac = new AbortController()\n        if (subId !== '') {\n            eventBus.on('updateSubMenus', ac, () => {\n                getSubMenu()\n            })\n        }\n        return () => {\n            ac.abort()\n            eventBus.remove('updateSubMenus', getSubMenu)\n        }\n    }, [getSubMenu, subMenuResponse, subId])\n\n    useEffect(() => {\n        const ac = new AbortController()\n\n        eventBus.on('updateItems', ac, () => {\n            getItems()\n        })\n        return () => {\n            ac.abort()\n            eventBus.remove('updateItems', getItems)\n        }\n    }, [getItems, itemResponse])\n\n    return <RoutesContainer />\n}\nexport default App\n","import './style-fonts/Open_Sans/static/OpenSans/OpenSans-Regular.ttf'\nimport './style-fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf'\nimport './style-fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf'\nimport './style-fonts/Roboto_Condensed/RobotoCondensed-Regular.ttf'\nimport './style-fonts/Roboto_Slab/static/RobotoSlab-Regular.ttf'\nimport './style-fonts/Roboto_Slab/static/RobotoSlab-Bold.ttf'\nimport './style-fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf'\nimport './style-fonts/Roboto_Slab/static/RobotoSlab-SemiBold.ttf'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport registerServiceWorker from './registerServiceWorker'\nimport store from './redux/store'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.querySelector('#root')\n)\nregisterServiceWorker()\n","/* eslint-disable no-param-reassign */\nimport {\n    createAsyncThunk,\n    createSlice,\n    PayloadAction,\n    Reducer,\n} from '@reduxjs/toolkit'\n\ninterface messageSliceState {\n    text: string | null\n    error: boolean\n}\nconst initialMessageState: messageSliceState = {\n    text: null,\n    error: false,\n}\n\nexport const newError = createAsyncThunk(\n    'message/error',\n    async (message: string) => message\n)\n\nexport const newMessage = createAsyncThunk(\n    'message/new',\n    async (message: string) => message\n)\nexport const clearMessage = createAsyncThunk(\n    'message/clear',\n    async (state) => state\n)\n\nexport const messageSlice = createSlice({\n    name: 'message',\n    initialState: initialMessageState,\n    reducers: {\n        // newMessage: (state, action: PayloadAction<string>) => {\n        //     state.text = action.payload\n        //     state.error = false\n        // },\n        // newError: (state, action: PayloadAction<string>) => {\n        //     state.text = action.payload\n        //     state.error = true\n        // },\n        // clearMessage: (state) => {\n        //     state.text = null\n        //     state.error = false\n        // },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(\n            newMessage.fulfilled,\n            (state, action: PayloadAction<string>) => {\n                state.text = action.payload\n                state.error = false\n            }\n        )\n        builder.addCase(\n            newError.fulfilled,\n            (state, action: PayloadAction<string>) => {\n                state.text = action.payload\n                state.error = true\n            }\n        )\n        builder.addCase(clearMessage.fulfilled, (state) => {\n            state.text = null\n            state.error = false\n        })\n    },\n})\n// export const { clearMessage } = messageSlice.actions\n\nexport default messageSlice.reducer as Reducer<typeof initialMessageState>\n","import { api } from './api'\nimport { IClassification, ISubMenuObj } from '../schemas'\n\nconst getDate = async (): Promise<any> => api.get(`date`)\n\nconst getClassifications = async (): Promise<IClassification[]> => {\n    const response = await api.get('classifications')\n    return response.data\n}\n\nconst getAdminContent = () => api.get(`admin`)\n\nconst getUrl = async (link: string): Promise<string> => {\n    const response = await api.get(`S3/link/${link}`)\n    return response.data\n}\n\nconst getSubMenuObj = async (id: string): Promise<ISubMenuObj> => {\n    const response = await api.get(`submenu/${id}`)\n    return response.data\n}\n\nconst UserService = {\n    getClassifications,\n    getDate,\n    getAdminContent,\n    getSubMenuObj,\n    getUrl,\n}\nexport default UserService\n","/* eslint-disable no-param-reassign */\nimport {\n    createAsyncThunk,\n    createSlice,\n    PayloadAction,\n    Reducer,\n} from '@reduxjs/toolkit'\nimport UserService from '../../service/user-service'\nimport { IListItem } from '../../schemas'\n\ntype TSelectedListPayload = {\n    parentId: string\n    list: IListItem[]\n    itemType: 'subMenu' | 'classification'\n}\ntype TSelectedPayload = { parentId: string; item: IListItem }\ntype TMapItem = { key: string; value: IListItem[] }\n\ninterface itemSliceState {\n    itemList: IListItem[] | []\n    selected: IListItem | Record<string, never>\n    listMap: TMapItem[] | Record<string, never>\n    parentId: string | null\n    url: string | null\n    editing: boolean\n    size: number\n    hasItems: boolean\n    loading: 'idle' | 'pending' | 'successful'\n    itemType: 'subMenu' | 'classification'\n}\nconst initialItemState: itemSliceState = {\n    itemList: [],\n    selected: {},\n    listMap: {},\n    url: null,\n    parentId: null,\n    editing: false,\n    size: 0,\n    hasItems: false,\n    loading: 'idle',\n    itemType: 'classification',\n}\n\nexport const getLinkUrl = createAsyncThunk(\n    'items/getUrl',\n    async (link: string) => {\n        const response = await UserService.getUrl(link)\n        return response\n    }\n)\n\nexport const itemSlice = createSlice({\n    name: 'items',\n    initialState: initialItemState,\n    reducers: {\n        itemLoading: (\n            state,\n            action: PayloadAction<'idle' | 'pending' | 'successful'>\n        ) => {\n            state.loading = action.payload\n        },\n        selectedItemList: (\n            state,\n            action: PayloadAction<TSelectedListPayload>\n        ) => {\n            const { parentId, list, itemType } = action.payload\n            state.itemList = list\n            state.size = list.length\n            state.parentId = parentId\n            if (state.listMap[parentId] === null) {\n                state.listMap[parentId] = list\n            }\n            state.loading = 'successful'\n            // state.editing = true\n            state.itemType = itemType\n        },\n        itemType: (\n            state,\n            action: PayloadAction<'subMenu' | 'classification'>\n        ) => {\n            state.itemType = action.payload\n        },\n        resetItemSelection: (state) => {\n            state.itemList = []\n            state.selected = {}\n            state.listMap = {}\n            state.parentId = null\n            state.editing = false\n            state.size = 0\n            state.hasItems = false\n            state.loading = 'idle'\n            state.itemType = 'classification'\n        },\n        editingItems: (state, action: PayloadAction<boolean>) => {\n            const currentSize = state.itemList.length\n            state.size = currentSize\n            state.editing = action.payload\n        },\n        selectedItem: (state, action: PayloadAction<TSelectedPayload>) => {\n            const { parentId, item } = action.payload\n            state.selected = item\n            state.parentId = parentId\n        },\n        removeItem: (state, action: PayloadAction<string>) => {\n            state.itemList = state.itemList.filter(\n                ({ link }) => link !== action.payload\n            )\n            state.editing = false\n            if (state.size > 0) {\n                state.size -= 1\n            }\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getLinkUrl.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(\n            getLinkUrl.fulfilled,\n            (state, action: PayloadAction<string>) => {\n                const url = action.payload\n                state.url = url\n                state.loading = 'successful'\n                state.editing = false\n            }\n        )\n    },\n})\nexport const {\n    itemLoading,\n    selectedItemList,\n    itemType,\n    removeItem,\n    selectedItem,\n    editingItems,\n    resetItemSelection,\n} = itemSlice.actions\n\nexport default itemSlice.reducer as Reducer<typeof initialItemState>\n","type TUserLoginResponse = {\n    accessToken: string\n    email: string\n    id: string\n    roles: string[]\n    tokenType: string\n}\n\nconst getLocalRefreshToken = (): string | undefined => {\n    const userStorage = localStorage.getItem('user')\n    if (userStorage) {\n        const user = JSON.parse(userStorage)\n        return user.refreshToken\n    }\n    return undefined\n}\n\nconst getLocalAccessToken = (): string | undefined => {\n    const userStorage = localStorage.getItem('user')\n    if (userStorage) {\n        const user = JSON.parse(userStorage)\n        return user.accessToken\n    }\n    return undefined\n    // const user = JSON.parse(localStorage.getItem('user'))\n    // console.log(`Get Token ${JSON.stringify(user.accessToken)}`)\n    // return user?.accessToken\n}\n\n// const updateLocalAccessToken = (token: string) => {\n//     const user = JSON.parse(localStorage.getItem('user'))\n//     user.accessToken = token\n//     localStorage.setItem('user', JSON.stringify(user))\n// }\n\n// const getUser = () => JSON.parse(localStorage.getItem('user'))\n\nconst setUser = (user: TUserLoginResponse): void => {\n    localStorage.setItem('user', JSON.stringify(user))\n}\n\nconst removeUser = (): void => {\n    localStorage.removeItem('user')\n}\n\nconst TokenService = {\n    getLocalRefreshToken,\n    getLocalAccessToken,\n    // updateLocalAccessToken,\n    // getUser,\n    setUser,\n    removeUser,\n}\n\nexport default TokenService\n","/* eslint-disable import/no-cycle */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-param-reassign */\nimport {\n    createAsyncThunk,\n    createSlice,\n    PayloadAction,\n    Reducer,\n} from '@reduxjs/toolkit'\nimport { itemType } from './item'\nimport { IListItem, ISubMenuObj } from '../../schemas'\nimport { api } from '../../service/api'\nimport { getOneClassification } from './classification'\n\ntype TNewSubMenu = { classification: string; name: string }\ntype TNewSubMenuLocation = {\n    newParentId: string\n    oldParentId: string\n    item: IListItem\n}\ninterface subMenuSliceState {\n    selected: ISubMenuObj | Record<string, never>\n    subMenuList: { [key: string]: ISubMenuObj } | Record<string, never>\n    itemList: IListItem[] | []\n    editing: boolean\n    itemCount: number\n    loading: 'idle' | 'pending' | 'successful'\n}\nconst initialSubMenuState: subMenuSliceState = {\n    selected: {},\n    subMenuList: {},\n    itemList: [],\n    editing: false,\n    itemCount: 0,\n    loading: 'idle',\n}\n\nexport const selectedSubMenu = createAsyncThunk(\n    'subMenu/selected',\n    async (subMenu: ISubMenuObj, thunkApi) => {\n        const value: ISubMenuObj = subMenu\n        thunkApi.dispatch(itemType('subMenu'))\n        return value\n    }\n)\n\nexport const getOne = createAsyncThunk<ISubMenuObj, string>(\n    'subMenu/getOne',\n    async (id: string, thunkApi) => {\n        const response = await api.get(`subMenu/${id}`).then((res) => {\n            thunkApi.dispatch(selectedSubMenu(res.data))\n            return res.data\n        })\n        return response\n    }\n)\n\nexport const createSubMenu = createAsyncThunk(\n    'subMenu/create',\n    async (data: TNewSubMenu, thunkApi) => {\n        const response = await api.post(`subMenu/create`, data)\n        thunkApi.dispatch(getOneClassification(data.classification))\n        return response\n    }\n)\n\nexport const moveSubMenuItem = createAsyncThunk(\n    'subMenu/move',\n    async (data: TNewSubMenuLocation) => {\n        const { oldParentId, newParentId, item } = data\n        const response = await api.post(\n            `/edit/subMenu/move/${oldParentId}/${newParentId}`,\n            item\n        )\n        return response.data\n    }\n)\n\nexport const subMenuSlice = createSlice({\n    name: 'subMenu',\n    initialState: initialSubMenuState,\n    reducers: {\n        subMenuLoading: (\n            state,\n            action: PayloadAction<'idle' | 'pending' | 'successful'>\n        ) => {\n            state.loading = action.payload\n        },\n        resetSubMenuSelection: (state) => {\n            state.selected = {}\n            state.itemList = []\n            state.editing = false\n            state.itemCount = 0\n            state.loading = 'idle'\n        },\n        editingSubMenu: (state, action: PayloadAction<boolean>) => {\n            state.editing = action.payload\n        },\n        removeListItem: (state, action: PayloadAction<string>) => {\n            state.itemList = state.itemList.filter(\n                ({ link }) => link !== action.payload\n            )\n            state.selected.itemList = state.selected.itemList.filter(\n                ({ link }) => link !== action.payload\n            )\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getOne.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(selectedSubMenu.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(\n            selectedSubMenu.fulfilled,\n            (state, action: PayloadAction<ISubMenuObj>) => {\n                const subMenu = action.payload\n                state.selected = subMenu\n                state.itemList = subMenu.itemList\n                state.loading = 'successful'\n                state.itemCount = subMenu.itemList.length\n                state.editing = true\n                if (state.subMenuList[subMenu._id] === undefined) {\n                    state.subMenuList[subMenu._id] = subMenu\n                }\n            }\n        )\n    },\n})\nexport const {\n    subMenuLoading,\n    removeListItem,\n    resetSubMenuSelection,\n    editingSubMenu,\n} = subMenuSlice.actions\n\nexport default subMenuSlice.reducer as Reducer<typeof initialSubMenuState>\n","import { api } from './api'\nimport TokenService from './token-service'\n\nexport type TUserDetails = {\n    fullName: string\n    username: string\n    email: string\n}\ntype TNewUser = {\n    fullname: string\n    username: string\n    email: string\n    password: string\n}\ntype TUserLogin = {\n    username: string\n    password: string\n}\ntype TUserLoginResponse = {\n    accessToken: string\n    email: string\n    id: string\n    roles: string[]\n    tokenType: string\n}\nconst { removeUser, setUser } = TokenService\n\nconst userDetails = async (username: string): Promise<TUserDetails> => {\n    const response = await api.get(`auth/user/${username}`)\n    return response.data\n}\n\nconst registerService = async (data: TNewUser): Promise<string> =>\n    api.post<TNewUser, string>(`auth/sign-up`, data)\n\nconst loginService = async (\n    details: TUserLogin\n): Promise<TUserLoginResponse> => {\n    const response = await api\n        .post<TUserLogin, TUserLoginResponse>(`auth/sign-in`, details)\n        .then((res) => {\n            if (res) {\n                setUser(res)\n            }\n            return res\n        })\n    return response\n}\n\nconst logoutService = (): void => {\n    removeUser()\n}\n\nconst AuthService = {\n    userDetails,\n    registerService,\n    loginService,\n    logoutService,\n}\n\nexport default AuthService\n","/* eslint-disable no-param-reassign */\nimport {\n    createAsyncThunk,\n    createSlice,\n    PayloadAction,\n    Reducer,\n} from '@reduxjs/toolkit'\nimport { AxiosResponse } from 'axios'\nimport AuthService from '../../service/auth-service'\nimport TokenService from '../../service/token-service'\nimport { IAppUser } from '../../schemas'\nimport { api } from '../../service/api'\n\ntype TLogin = { username: string; password: string }\ntype TRegister = {\n    fullName: string\n    username: string\n    email: string\n    password: string\n    confirmPassword: string\n}\ninterface TUserLoginResponse extends AxiosResponse {\n    accessToken: string\n    email: string\n    id: string\n    roles: string[]\n    tokenType: string\n}\ninterface authSliceState {\n    isAuth: boolean\n    user: IAppUser | Record<string, null>\n    loading: 'idle' | 'pending' | 'successful'\n    error: string | null\n    contentPath: '/dashboard' | '/dashboard/admin' | null\n    showEdit: boolean\n}\n\nconst data: string | null = localStorage.getItem('user')\nconst user = data ? JSON.parse(data) : null\n\nconst initialAuthState: authSliceState = user\n    ? {\n          isAuth: true,\n          user,\n          loading: 'successful',\n          error: null,\n          contentPath: null,\n          showEdit: false,\n      }\n    : {\n          isAuth: false,\n          user: {},\n          loading: 'idle',\n          error: null,\n          contentPath: null,\n          showEdit: false,\n      }\n\nconst isUser = (value: unknown): value is IAppUser => {\n    return !!value && !!(value as IAppUser)\n}\n\nexport const login = createAsyncThunk(\n    'auth/login',\n    async (credentials: TLogin) => {\n        const response = await api.post(`auth/sign-in`, credentials)\n        return response.data\n    }\n)\n\nexport const logout = createAsyncThunk('auth/logout', async () => {\n    return AuthService.logoutService()\n})\n\nexport const userRegister = createAsyncThunk(\n    'auth/register',\n    async (regCredentials: TRegister) => {\n        const response = await api.post<TRegister, TUserLoginResponse>(\n            `auth/sign-up`,\n            regCredentials\n        )\n        TokenService.setUser(response.data)\n        return response.data\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState: initialAuthState,\n    reducers: {\n        defineContentPath: (state, action: PayloadAction<IAppUser>) => {\n            const userData = action.payload\n            if (isUser(userData) && userData.roles !== undefined) {\n                if (userData.roles.includes('ROLE_ADMIN')) {\n                    state.contentPath = '/dashboard/admin'\n                } else {\n                    state.contentPath = '/dashboard'\n                }\n            } else {\n                state.isAuth = false\n            }\n        },\n        registerSuccess: (state, action: PayloadAction<IAppUser>) => {\n            const userDetails = action.payload\n            state.user = userDetails\n            state.isAuth = true\n            state.isAuth = false\n        },\n        registerFail: (state) => {\n            state.isAuth = false\n        },\n        userRefreshToken: (state, action: PayloadAction<string>) => {\n            const token = action.payload\n            state.user = { ...user, accessToken: token }\n        },\n        showEditToggle: (state) => {\n            const currentState = state.showEdit\n            state.showEdit = !currentState\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(login.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(login.fulfilled, (state, action) => {\n            const userData = action.payload\n            if (isUser(userData)) {\n                TokenService.setUser(userData)\n                state.user = userData\n                state.isAuth = true\n                state.loading = 'successful'\n                state.error = ''\n                if (userData.roles.includes('ROLE_ADMIN')) {\n                    state.contentPath = '/dashboard/admin'\n                }\n            } else {\n                state.isAuth = false\n                state.loading = 'idle'\n                state.user = {}\n                state.error = 'Login failed'\n            }\n        })\n        builder.addCase(login.rejected, (state) => {\n            state.isAuth = false\n            state.user = {}\n            state.loading = 'idle'\n            state.error = 'Login failed - try again'\n        })\n        builder.addCase(userRegister.fulfilled, (state, action) => {\n            const userData = action.payload\n            if (isUser(userData)) {\n                state.user = userData\n                state.isAuth = true\n                state.loading = 'successful'\n                state.error = ''\n                if (userData.roles.includes('ROLE_ADMIN')) {\n                    state.contentPath = '/dashboard/admin'\n                }\n            } else {\n                state.isAuth = false\n                state.loading = 'idle'\n                state.user = {}\n                state.error = 'Registration failed'\n            }\n        })\n        builder.addCase(userRegister.rejected, (state) => {\n            state.isAuth = false\n            state.loading = 'idle'\n            state.user = {}\n            state.error = 'Registration failed - username or email in use'\n        })\n        builder.addCase(logout.fulfilled, (state) => {\n            state.isAuth = false\n            state.loading = 'idle'\n            state.error = ''\n            state.user = {}\n        })\n    },\n})\nexport const {\n    showEditToggle,\n    registerSuccess,\n    registerFail,\n    defineContentPath,\n    userRefreshToken,\n} = authSlice.actions\n\nexport default authSlice.reducer as Reducer<typeof initialAuthState>\n","/* eslint-disable import/no-cycle */\n/* eslint-disable no-param-reassign */\nimport {\n    createAsyncThunk,\n    createSlice,\n    PayloadAction,\n    Reducer,\n} from '@reduxjs/toolkit'\nimport { AxiosError } from 'axios'\nimport { IClassification } from '../../schemas'\nimport { api } from '../../service/api'\nimport { newError } from './message'\nimport { itemType } from './item'\n\ntype TNewClassification = { name: string }\ninterface classificationSliceState {\n    entities: IClassification[] | []\n    selected: IClassification | Record<string, never>\n    editing: boolean\n    subMenuCount: number\n    listItemsCount: number\n    loading: 'idle' | 'pending' | 'successful'\n}\nconst initialClassificationState: classificationSliceState = {\n    entities: [],\n    selected: {},\n    editing: false,\n    subMenuCount: 0,\n    listItemsCount: 0,\n    loading: 'idle',\n}\n\nexport const getAllClassifications = createAsyncThunk<IClassification[], void>(\n    'classifications/getAll',\n    async (_, thunkApi) =>\n        api\n            .get('classifications')\n            .then((res) => {\n                if (res !== undefined) {\n                    return Promise.resolve(res.data)\n                }\n                return Promise.reject(res)\n            })\n            .catch((err: AxiosError) => {\n                if (err !== undefined) {\n                    if (err.isAxiosError) {\n                        thunkApi.dispatch(newError(err.message))\n                    }\n                    Promise.reject(err.message)\n                } else {\n                    thunkApi.dispatch(newError('Server Error'))\n                }\n                Promise.reject()\n            })\n)\n\nexport const selectedClassification = createAsyncThunk(\n    'classifications/selected',\n    async (classification: IClassification, thunkApi) => {\n        thunkApi.dispatch(itemType('classification'))\n        return classification\n    }\n)\n\nexport const getOneClassification = createAsyncThunk(\n    'classifications/getOne',\n    async (id: string) => {\n        const response = await api.get(`classifications/${id}`)\n        return response.data\n    }\n)\n\nexport const createClassification = createAsyncThunk(\n    'classifications/create',\n    async (data: TNewClassification, thunkApi) => {\n        const response = await api.post(`classification/create`, data)\n        thunkApi.dispatch(getAllClassifications())\n        return response\n    }\n)\n\nexport const classificationSlice = createSlice({\n    name: 'classifications',\n    initialState: initialClassificationState,\n    reducers: {\n        editingClassification: (state, action: PayloadAction<boolean>) => {\n            state.editing = action.payload\n        },\n        resetClassificationSelection: (state) => {\n            state.selected = {}\n            state.editing = false\n            state.subMenuCount = 0\n            state.listItemsCount = 0\n            state.loading = 'idle'\n        },\n        setClassifications: (\n            state,\n            action: PayloadAction<IClassification[]>\n        ) => {\n            const classifications = action.payload\n            state.entities = classifications\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getAllClassifications.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(\n            getAllClassifications.fulfilled,\n            (state, action: PayloadAction<IClassification[]>) => {\n                state.entities = action.payload\n                state.loading = 'successful'\n            }\n        )\n        builder.addCase(selectedClassification.pending, (state) => {\n            state.loading = 'pending'\n        })\n        builder.addCase(\n            selectedClassification.fulfilled,\n            (state, action: PayloadAction<IClassification>) => {\n                const classification = action.payload\n                state.selected = classification\n                state.subMenuCount = Array.from(\n                    Object.keys(classification.subMenus)\n                ).length\n                state.listItemsCount = classification.listItems.length\n                state.loading = 'successful'\n            }\n        )\n    },\n})\nexport const {\n    setClassifications,\n    resetClassificationSelection,\n    editingClassification,\n} = classificationSlice.actions\n\nexport default classificationSlice.reducer as Reducer<\n    typeof initialClassificationState\n>\n","import { useCallback, useState } from 'react'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\nimport { ISubMenuObj } from '../schemas'\nimport { selectedSubMenu, getOne } from '../redux/slices/subMenu'\nimport { newError } from '../redux/slices/message'\nimport eventBus from '../common/EventBus'\n\ninterface Props {\n    id: string\n    subMenuObj: ISubMenuObj | Record<string, unknown>\n    isLoading: boolean\n    error: null\n}\nconst useSubMenu = (props: Props): [Props, () => void] => {\n    const { id, subMenuObj, isLoading, error } = props\n    const subMenuListState = useAppSelector(\n        (state) => state.subMenu.subMenuList\n    )\n    // const loadingItem = useAppSelector((state) => state.item.loading)\n    const loadingState = useAppSelector((state) => state.subMenu.loading)\n    const dispatch = useAppDispatch()\n    const [response, setResponse] = useState({\n        id,\n        subMenuObj,\n        isLoading,\n        error,\n    })\n\n    const isSubMenuObj = (value: unknown): value is ISubMenuObj => {\n        return !!value && !!(value as ISubMenuObj)\n    }\n\n    const getSubMenu = useCallback(() => {\n        const ac = new AbortController()\n\n        setResponse((prevState) => ({ ...prevState, isLoading: true }))\n        const subMenuCurrent: ISubMenuObj = subMenuListState[id]\n        if (isSubMenuObj(subMenuCurrent) && loadingState !== 'pending') {\n            dispatch(selectedSubMenu(subMenuCurrent))\n                .then((res) => {\n                    if (loadingState === 'successful') {\n                        setResponse({\n                            id,\n                            subMenuObj: res,\n                            isLoading: false,\n                            error: null,\n                        })\n                        eventBus.dispatch('updateItems')\n                    }\n                })\n                .catch((err: Error) => {\n                    dispatch(newError(err.message))\n                    return Promise.reject(err.message)\n                })\n        } else if (loadingState !== 'pending') {\n            dispatch(getOne(id))\n                .then(unwrapResult)\n                .then((res: ISubMenuObj) => {\n                    // const subMenuFetched: ISubMenuObj = res\n                    if (res !== undefined && isSubMenuObj(res)) {\n                        setResponse({\n                            id,\n                            subMenuObj: res,\n                            isLoading: false,\n                            error: null,\n                        })\n                        eventBus.dispatch('updateItems')\n                    }\n                })\n                .catch((err: Error) => {\n                    dispatch(newError(err.message))\n                    return Promise.reject(err.message)\n                })\n        }\n\n        return () => ac.abort()\n    }, [id, dispatch, subMenuListState, loadingState])\n\n    return [response, getSubMenu]\n}\n\nexport default useSubMenu\n","/* eslint-disable no-unused-expressions */\n/* eslint-disable no-param-reassign */\n/* eslint-disable class-methods-use-this */\nimport axios, {\n    AxiosInstance,\n    AxiosRequestConfig,\n    AxiosResponse,\n    AxiosError,\n} from 'axios'\n\nimport TokenService from './token-service'\nimport EventBus from '../common/EventBus'\nimport { messageSlice, newError } from '../redux/slices/message'\n\nenum StatusCode {\n    Unauthorized = 401,\n    Forbidden = 403,\n    TooManyRequests = 429,\n    InternalServerError = 500,\n}\n\nconst headers: Readonly<Record<string, string | boolean>> = {\n    'Access-Control-Allow-Methods': 'POST, PUT, GET, OPTIONS, DELETE',\n    'X-Requested-With': 'XMLHttpRequest',\n    'Content-Type': 'application/json',\n}\n\nconst { getLocalAccessToken } = TokenService\nconst injectToken = (config: AxiosRequestConfig): AxiosRequestConfig => {\n    try {\n        const token = getLocalAccessToken()\n        if (token !== null || token !== undefined) {\n            config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n    } catch (error: any) {\n        Promise.reject(error)\n        EventBus.dispatch('logout')\n    }\n    return config\n}\n\nclass Http {\n    private instance: AxiosInstance | null = null\n\n    private get http(): AxiosInstance {\n        return this.instance != null ? this.instance : this.initHttp()\n    }\n\n    initHttp() {\n        const http = axios.create({\n            // baseURL: `${process.env.PUBLIC_URL}/api/`,\n            baseURL: 'http://localhost:8080/api/',\n            headers,\n            withCredentials: true,\n        })\n\n        http.interceptors.request.use(injectToken, (error) =>\n            Promise.reject(error)\n        )\n\n        http.interceptors.response.use(\n            (response) => response,\n            (error: Error | AxiosError) => {\n                if (axios.isAxiosError(error) && error.response !== undefined) {\n                    this.handleError(error.response?.status)\n                }\n                return Promise.reject(error.message)\n            }\n        )\n        this.instance = http\n        return http\n    }\n\n    request<T = any, R = AxiosResponse<T>>(\n        config: AxiosRequestConfig\n    ): Promise<R> {\n        return this.http.request(config)\n    }\n\n    get<T = any, R = AxiosResponse<T>>(\n        url: string,\n        config?: AxiosRequestConfig\n    ): Promise<R> {\n        return this.http.get<T, R>(url, config)\n    }\n\n    post<T = any, R = AxiosResponse<T>>(\n        url: string,\n        data?: T,\n        config?: AxiosRequestConfig\n    ): Promise<R> {\n        return this.http.post<T, R>(url, data, config)\n    }\n\n    put<T = any, R = AxiosResponse<T>>(\n        url: string,\n        data?: T,\n        config?: AxiosRequestConfig\n    ): Promise<R> {\n        return this.http.put<T, R>(url, data, config)\n    }\n\n    delete<T = any, R = AxiosResponse<T>>(\n        url: string,\n        config?: AxiosRequestConfig\n    ): Promise<R> {\n        return this.http.delete<T, R>(url, config)\n    }\n\n    // Handle global app errors\n    // We can handle generic app errors depending on the status code\n    private handleError(response: number) {\n        switch (response) {\n            case StatusCode.InternalServerError:\n                // history.push('/home')\n                // EventBus.dispatch('logout')\n                // newError('Internal Server Error')\n                // Promise.reject(new Error('Internal Server Error'))\n                break\n\n            case StatusCode.Forbidden:\n                // history.push('/home')\n                EventBus.dispatch('logout')\n                // newError('Forbidden')\n                break\n\n            case StatusCode.Unauthorized:\n                // history.push('/home')\n                EventBus.dispatch('logout')\n                // newError('Unauthorized')\n\n                break\n            // case StatusCode.TooManyRequests:\n            // Handle TooManyRequests\n            // break\n            // no default\n        }\n        return Promise.reject(response)\n    }\n}\n\nexport const api = new Http()\n","import { ThunkDispatch } from '@reduxjs/toolkit'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch, TDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): TDispatch => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n"],"sourceRoot":""}